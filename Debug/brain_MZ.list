
brain_MZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800277c  0800277c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800277c  0800277c  0000377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002784  08002784  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002784  08002784  00003784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002788  08002788  00003788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800278c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002798  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002798  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f1d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ce  00000000  00000000  0000cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0000e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b4  00000000  00000000  0000f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a14  00000000  00000000  0000f7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b800  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca8fe  00000000  00000000  0003b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001062e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002994  00000000  00000000  0010632c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00108cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002754 	.word	0x08002754

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002754 	.word	0x08002754

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb50 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80a 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9c2 	bl	8000888 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000504:	f000 f918 	bl	8000738 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000508:	f000 f96a 	bl	80007e0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800050c:	f000 f862 	bl	80005d4 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x1c>

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	@ 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2234      	movs	r2, #52	@ 0x34
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 f8ea 	bl	80026fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	@ (80005cc <SystemClock_Config+0xb8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	4a22      	ldr	r2, [pc, #136]	@ (80005cc <SystemClock_Config+0xb8>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
 8000548:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <SystemClock_Config+0xb8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <SystemClock_Config+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000560:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <SystemClock_Config+0xbc>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <SystemClock_Config+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f883 	bl	8001694 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f992 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fdde 	bl	8001174 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005be:	f000 f97d 	bl	80008bc <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	@ 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b092      	sub	sp, #72	@ 0x48
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2220      	movs	r2, #32
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f87c 	bl	80026fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000604:	4b4a      	ldr	r3, [pc, #296]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000606:	4a4b      	ldr	r2, [pc, #300]	@ (8000734 <MX_TIM1_Init+0x160>)
 8000608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800060a:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <MX_TIM1_Init+0x15c>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b47      	ldr	r3, [pc, #284]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000616:	4b46      	ldr	r3, [pc, #280]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800061c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b44      	ldr	r3, [pc, #272]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000624:	4b42      	ldr	r3, [pc, #264]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062a:	4b41      	ldr	r3, [pc, #260]	@ (8000730 <MX_TIM1_Init+0x15c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000630:	483f      	ldr	r0, [pc, #252]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000632:	f001 fb26 	bl	8001c82 <HAL_TIM_PWM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800063c:	f000 f93e 	bl	80008bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000640:	483b      	ldr	r0, [pc, #236]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000642:	f001 fac5 	bl	8001bd0 <HAL_TIM_OC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800064c:	f000 f936 	bl	80008bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000658:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800065c:	4619      	mov	r1, r3
 800065e:	4834      	ldr	r0, [pc, #208]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000660:	f001 ff7e 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800066a:	f000 f927 	bl	80008bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066e:	2360      	movs	r3, #96	@ 0x60
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000676:	2300      	movs	r3, #0
 8000678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4827      	ldr	r0, [pc, #156]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000694:	f001 fc46 	bl	8001f24 <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800069e:	f000 f90d 	bl	80008bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a6:	2204      	movs	r2, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4821      	ldr	r0, [pc, #132]	@ (8000730 <MX_TIM1_Init+0x15c>)
 80006ac:	f001 fc3a 	bl	8001f24 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 80006b6:	f000 f901 	bl	80008bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006be:	2208      	movs	r2, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	481b      	ldr	r0, [pc, #108]	@ (8000730 <MX_TIM1_Init+0x15c>)
 80006c4:	f001 fc2e 	bl	8001f24 <HAL_TIM_PWM_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006ce:	f000 f8f5 	bl	80008bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	220c      	movs	r2, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <MX_TIM1_Init+0x15c>)
 80006e0:	f001 fbc4 	bl	8001e6c <HAL_TIM_OC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80006ea:	f000 f8e7 	bl	80008bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000702:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000706:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000712:	f001 ffa1 	bl	8002658 <HAL_TIMEx_ConfigBreakDeadTime>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800071c:	f000 f8ce 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000722:	f000 f995 	bl	8000a50 <HAL_TIM_MspPostInit>

}
 8000726:	bf00      	nop
 8000728:	3748      	adds	r7, #72	@ 0x48
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028
 8000734:	40010000 	.word	0x40010000

08000738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2224      	movs	r2, #36	@ 0x24
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f001 ffd8 	bl	80026fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000756:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_TIM2_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_TIM2_Init+0xa4>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800077c:	2303      	movs	r3, #3
 800077e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_TIM2_Init+0xa4>)
 80007a8:	f001 faba 	bl	8001d20 <HAL_TIM_Encoder_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007b2:	f000 f883 	bl	80008bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_TIM2_Init+0xa4>)
 80007c4:	f001 fecc 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007ce:	f000 f875 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000070 	.word	0x20000070

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	@ 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	@ 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ff84 	bl	80026fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_TIM3_Init+0xa0>)
 80007fe:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_TIM3_Init+0xa0>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM3_Init+0xa0>)
 8000810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_TIM3_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000822:	2303      	movs	r3, #3
 8000824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083a:	2301      	movs	r3, #1
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800084e:	f001 fa67 	bl	8001d20 <HAL_TIM_Encoder_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f830 	bl	80008bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800086a:	f001 fe79 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000874:	f000 f822 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	@ 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000b8 	.word	0x200000b8
 8000884:	40000400 	.word	0x40000400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_GPIO_Init+0x30>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <MX_GPIO_Init+0x30>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_GPIO_Init+0x30>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <HAL_TIM_PWM_MspInit+0x3c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10d      	bne.n	8000946 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <HAL_TIM_PWM_MspInit+0x40>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a09      	ldr	r2, [pc, #36]	@ (8000958 <HAL_TIM_PWM_MspInit+0x40>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <HAL_TIM_PWM_MspInit+0x40>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40010000 	.word	0x40010000
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	@ 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800097c:	d12c      	bne.n	80009d8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	4b30      	ldr	r3, [pc, #192]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a2f      	ldr	r2, [pc, #188]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <HAL_TIM_Encoder_MspInit+0xec>)
 80009d2:	f000 fa3b 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009d6:	e030      	b.n	8000a3a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a4c <HAL_TIM_Encoder_MspInit+0xf0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d12b      	bne.n	8000a3a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1a:	23c0      	movs	r3, #192	@ 0xc0
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <HAL_TIM_Encoder_MspInit+0xec>)
 8000a36:	f000 fa09 	bl	8000e4c <HAL_GPIO_Init>
}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	@ 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40000400 	.word	0x40000400

08000a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <HAL_TIM_MspPostInit+0x68>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d11e      	bne.n	8000ab0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <HAL_TIM_MspPostInit+0x6c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a10      	ldr	r2, [pc, #64]	@ (8000abc <HAL_TIM_MspPostInit+0x6c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_TIM_MspPostInit+0x6c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a8e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <HAL_TIM_MspPostInit+0x70>)
 8000aac:	f000 f9ce 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1a:	f000 f891 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b4c:	f7ff ffea 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f001 fdc9 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fcbb 	bl	80004f4 <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	0800278c 	.word	0x0800278c
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	20000104 	.word	0x20000104

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <HAL_Init+0x40>)
 8000ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <HAL_Init+0x40>)
 8000bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_Init+0x40>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f90d 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f000 f808 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fe7a 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023c00 	.word	0x40023c00

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f917 	bl	8000e32 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 f8ed 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000100 	.word	0x20000100

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000100 	.word	0x20000100

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	@ (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff47 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5c 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e165      	b.n	8001134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8154 	bne.w	800112e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d130      	bne.n	8000f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d017      	beq.n	8000f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80ae 	beq.w	800112e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800114c <HAL_GPIO_Init+0x300>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a5c      	ldr	r2, [pc, #368]	@ (800114c <HAL_GPIO_Init+0x300>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800114c <HAL_GPIO_Init+0x300>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fee:	4a58      	ldr	r2, [pc, #352]	@ (8001150 <HAL_GPIO_Init+0x304>)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	@ (8001154 <HAL_GPIO_Init+0x308>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d025      	beq.n	8001066 <HAL_GPIO_Init+0x21a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_GPIO_Init+0x30c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01f      	beq.n	8001062 <HAL_GPIO_Init+0x216>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	@ (800115c <HAL_GPIO_Init+0x310>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x212>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <HAL_GPIO_Init+0x314>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x318>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x20a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x31c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x206>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a49      	ldr	r2, [pc, #292]	@ (800116c <HAL_GPIO_Init+0x320>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x202>
 800104a:	2306      	movs	r3, #6
 800104c:	e00c      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800104e:	2307      	movs	r3, #7
 8001050:	e00a      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001052:	2305      	movs	r3, #5
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001056:	2304      	movs	r3, #4
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	@ (8001150 <HAL_GPIO_Init+0x304>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <HAL_GPIO_Init+0x324>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010aa:	4a31      	ldr	r2, [pc, #196]	@ (8001170 <HAL_GPIO_Init+0x324>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_GPIO_Init+0x324>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d4:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <HAL_GPIO_Init+0x324>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010da:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <HAL_GPIO_Init+0x324>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <HAL_GPIO_Init+0x324>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_GPIO_Init+0x324>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001128:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <HAL_GPIO_Init+0x324>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f ae96 	bls.w	8000e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	@ 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40021400 	.word	0x40021400
 800116c:	40021800 	.word	0x40021800
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0cc      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b68      	ldr	r3, [pc, #416]	@ (800132c <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d90c      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b65      	ldr	r3, [pc, #404]	@ (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b63      	ldr	r3, [pc, #396]	@ (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0b8      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c8:	4b59      	ldr	r3, [pc, #356]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a58      	ldr	r2, [pc, #352]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e0:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	4b50      	ldr	r3, [pc, #320]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	494d      	ldr	r1, [pc, #308]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d044      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d119      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e07f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d003      	beq.n	8001232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	2b03      	cmp	r3, #3
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b3f      	ldr	r3, [pc, #252]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e06f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e067      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4934      	ldr	r1, [pc, #208]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fd00 	bl	8000c68 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fcfc 	bl	8000c68 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e04f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b25      	ldr	r3, [pc, #148]	@ (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d20c      	bcs.n	80012bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e032      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4916      	ldr	r1, [pc, #88]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	490e      	ldr	r1, [pc, #56]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012fa:	f000 f821 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	490a      	ldr	r1, [pc, #40]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	5ccb      	ldrb	r3, [r1, r3]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc60 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	0800276c 	.word	0x0800276c
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b0a6      	sub	sp, #152	@ 0x98
 8001346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001366:	4bc8      	ldr	r3, [pc, #800]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b0c      	cmp	r3, #12
 8001370:	f200 817e 	bhi.w	8001670 <HAL_RCC_GetSysClockFreq+0x330>
 8001374:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	080013b1 	.word	0x080013b1
 8001380:	08001671 	.word	0x08001671
 8001384:	08001671 	.word	0x08001671
 8001388:	08001671 	.word	0x08001671
 800138c:	080013b9 	.word	0x080013b9
 8001390:	08001671 	.word	0x08001671
 8001394:	08001671 	.word	0x08001671
 8001398:	08001671 	.word	0x08001671
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	08001671 	.word	0x08001671
 80013a4:	08001671 	.word	0x08001671
 80013a8:	08001671 	.word	0x08001671
 80013ac:	0800152b 	.word	0x0800152b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4bb6      	ldr	r3, [pc, #728]	@ (800168c <HAL_RCC_GetSysClockFreq+0x34c>)
 80013b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80013b6:	e15f      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x350>)
 80013ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80013be:	e15b      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c0:	4bb1      	ldr	r3, [pc, #708]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013cc:	4bae      	ldr	r3, [pc, #696]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d031      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d8:	4bab      	ldr	r3, [pc, #684]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	2200      	movs	r2, #0
 80013e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80013e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80013e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80013ec:	2300      	movs	r3, #0
 80013ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80013f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x350>)
 80013f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80013f6:	462a      	mov	r2, r5
 80013f8:	fb03 f202 	mul.w	r2, r3, r2
 80013fc:	2300      	movs	r3, #0
 80013fe:	4621      	mov	r1, r4
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	4aa2      	ldr	r2, [pc, #648]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x350>)
 8001408:	4621      	mov	r1, r4
 800140a:	fba1 1202 	umull	r1, r2, r1, r2
 800140e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001410:	460a      	mov	r2, r1
 8001412:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001414:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001416:	4413      	add	r3, r2
 8001418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800141a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800141e:	2200      	movs	r2, #0
 8001420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001422:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001424:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001428:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800142c:	f7fe feea 	bl	8000204 <__aeabi_uldivmod>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4613      	mov	r3, r2
 8001436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800143a:	e064      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143c:	4b92      	ldr	r3, [pc, #584]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	099b      	lsrs	r3, r3, #6
 8001442:	2200      	movs	r2, #0
 8001444:	653b      	str	r3, [r7, #80]	@ 0x50
 8001446:	657a      	str	r2, [r7, #84]	@ 0x54
 8001448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800144a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800144e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001450:	2300      	movs	r3, #0
 8001452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001454:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001458:	4622      	mov	r2, r4
 800145a:	462b      	mov	r3, r5
 800145c:	f04f 0000 	mov.w	r0, #0
 8001460:	f04f 0100 	mov.w	r1, #0
 8001464:	0159      	lsls	r1, r3, #5
 8001466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800146a:	0150      	lsls	r0, r2, #5
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4621      	mov	r1, r4
 8001472:	1a51      	subs	r1, r2, r1
 8001474:	6139      	str	r1, [r7, #16]
 8001476:	4629      	mov	r1, r5
 8001478:	eb63 0301 	sbc.w	r3, r3, r1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800148a:	4659      	mov	r1, fp
 800148c:	018b      	lsls	r3, r1, #6
 800148e:	4651      	mov	r1, sl
 8001490:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001494:	4651      	mov	r1, sl
 8001496:	018a      	lsls	r2, r1, #6
 8001498:	4651      	mov	r1, sl
 800149a:	ebb2 0801 	subs.w	r8, r2, r1
 800149e:	4659      	mov	r1, fp
 80014a0:	eb63 0901 	sbc.w	r9, r3, r1
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b8:	4690      	mov	r8, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	4623      	mov	r3, r4
 80014be:	eb18 0303 	adds.w	r3, r8, r3
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	462b      	mov	r3, r5
 80014c6:	eb49 0303 	adc.w	r3, r9, r3
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80014d8:	4629      	mov	r1, r5
 80014da:	028b      	lsls	r3, r1, #10
 80014dc:	4621      	mov	r1, r4
 80014de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014e2:	4621      	mov	r1, r4
 80014e4:	028a      	lsls	r2, r1, #10
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014ee:	2200      	movs	r2, #0
 80014f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80014f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80014f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80014f8:	f7fe fe84 	bl	8000204 <__aeabi_uldivmod>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4613      	mov	r3, r2
 8001502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	3301      	adds	r3, #1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001518:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800151c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001520:	fbb2 f3f3 	udiv	r3, r2, r3
 8001524:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001528:	e0a6      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152a:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001536:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d02a      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001542:	4b51      	ldr	r3, [pc, #324]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	2200      	movs	r2, #0
 800154a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800154c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001554:	2100      	movs	r1, #0
 8001556:	4b4e      	ldr	r3, [pc, #312]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x350>)
 8001558:	fb03 f201 	mul.w	r2, r3, r1
 800155c:	2300      	movs	r3, #0
 800155e:	fb00 f303 	mul.w	r3, r0, r3
 8001562:	4413      	add	r3, r2
 8001564:	4a4a      	ldr	r2, [pc, #296]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x350>)
 8001566:	fba0 1202 	umull	r1, r2, r0, r2
 800156a:	677a      	str	r2, [r7, #116]	@ 0x74
 800156c:	460a      	mov	r2, r1
 800156e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001570:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001572:	4413      	add	r3, r2
 8001574:	677b      	str	r3, [r7, #116]	@ 0x74
 8001576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800157a:	2200      	movs	r2, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
 800157e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001580:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001584:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001588:	f7fe fe3c 	bl	8000204 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4613      	mov	r3, r2
 8001592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001596:	e05b      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001598:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	2200      	movs	r2, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015aa:	623b      	str	r3, [r7, #32]
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015b4:	4642      	mov	r2, r8
 80015b6:	464b      	mov	r3, r9
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	0159      	lsls	r1, r3, #5
 80015c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c6:	0150      	lsls	r0, r2, #5
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4641      	mov	r1, r8
 80015ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80015d2:	4649      	mov	r1, r9
 80015d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015ec:	ebb2 040a 	subs.w	r4, r2, sl
 80015f0:	eb63 050b 	sbc.w	r5, r3, fp
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	00eb      	lsls	r3, r5, #3
 80015fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001602:	00e2      	lsls	r2, r4, #3
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	4643      	mov	r3, r8
 800160a:	18e3      	adds	r3, r4, r3
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	464b      	mov	r3, r9
 8001610:	eb45 0303 	adc.w	r3, r5, r3
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001622:	4629      	mov	r1, r5
 8001624:	028b      	lsls	r3, r1, #10
 8001626:	4621      	mov	r1, r4
 8001628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800162c:	4621      	mov	r1, r4
 800162e:	028a      	lsls	r2, r1, #10
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001638:	2200      	movs	r2, #0
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	61fa      	str	r2, [r7, #28]
 800163e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001642:	f7fe fddf 	bl	8000204 <__aeabi_uldivmod>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4613      	mov	r3, r2
 800164c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x348>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	0f1b      	lsrs	r3, r3, #28
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800165e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001662:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800166e:	e003      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001676:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800167c:	4618      	mov	r0, r3
 800167e:	3798      	adds	r7, #152	@ 0x98
 8001680:	46bd      	mov	sp, r7
 8001682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	017d7840 	.word	0x017d7840

08001694 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e28d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8083 	beq.w	80017ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016b4:	4b94      	ldr	r3, [pc, #592]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d019      	beq.n	80016f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80016c0:	4b91      	ldr	r3, [pc, #580]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80016cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016d8:	d00c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	4b8b      	ldr	r3, [pc, #556]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d112      	bne.n	800170c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016f2:	d10b      	bne.n	800170c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	4b84      	ldr	r3, [pc, #528]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d05b      	beq.n	80017b8 <HAL_RCC_OscConfig+0x124>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d157      	bne.n	80017b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e25a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001714:	d106      	bne.n	8001724 <HAL_RCC_OscConfig+0x90>
 8001716:	4b7c      	ldr	r3, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7b      	ldr	r2, [pc, #492]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e01d      	b.n	8001760 <HAL_RCC_OscConfig+0xcc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0xb4>
 800172e:	4b76      	ldr	r3, [pc, #472]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a75      	ldr	r2, [pc, #468]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b73      	ldr	r3, [pc, #460]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a72      	ldr	r2, [pc, #456]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0xcc>
 8001748:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a6e      	ldr	r2, [pc, #440]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800174e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b6c      	ldr	r3, [pc, #432]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6b      	ldr	r2, [pc, #428]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fa7e 	bl	8000c68 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fa7a 	bl	8000c68 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	@ 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e21f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b61      	ldr	r3, [pc, #388]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0xdc>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fa6a 	bl	8000c68 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fa66 	bl	8000c68 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e20b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	4b57      	ldr	r3, [pc, #348]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x104>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d06f      	beq.n	80018a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017c6:	4b50      	ldr	r3, [pc, #320]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d017      	beq.n	8001802 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80017d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d105      	bne.n	80017ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80017de:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ea:	4b47      	ldr	r3, [pc, #284]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d11c      	bne.n	8001830 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f6:	4b44      	ldr	r3, [pc, #272]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d116      	bne.n	8001830 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x186>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e1d3      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4937      	ldr	r1, [pc, #220]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	e03a      	b.n	80018a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001838:	4b34      	ldr	r3, [pc, #208]	@ (800190c <HAL_RCC_OscConfig+0x278>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff fa13 	bl	8000c68 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fa0f 	bl	8000c68 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1b4      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001864:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4925      	ldr	r1, [pc, #148]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e015      	b.n	80018a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_RCC_OscConfig+0x278>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f9f2 	bl	8000c68 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff f9ee 	bl	8000c68 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e193      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d036      	beq.n	8001920 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d016      	beq.n	80018e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff f9d2 	bl	8000c68 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c8:	f7ff f9ce 	bl	8000c68 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e173      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80018dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x234>
 80018e6:	e01b      	b.n	8001920 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9bb 	bl	8000c68 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	e00e      	b.n	8001914 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff f9b7 	bl	8000c68 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d907      	bls.n	8001914 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e15c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
 8001908:	40023800 	.word	0x40023800
 800190c:	42470000 	.word	0x42470000
 8001910:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	4b8a      	ldr	r3, [pc, #552]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ea      	bne.n	80018f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8097 	beq.w	8001a5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b83      	ldr	r3, [pc, #524]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10f      	bne.n	800195e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b7f      	ldr	r3, [pc, #508]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a7e      	ldr	r2, [pc, #504]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b79      	ldr	r3, [pc, #484]	@ (8001b44 <HAL_RCC_OscConfig+0x4b0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b76      	ldr	r3, [pc, #472]	@ (8001b44 <HAL_RCC_OscConfig+0x4b0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a75      	ldr	r2, [pc, #468]	@ (8001b44 <HAL_RCC_OscConfig+0x4b0>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff f977 	bl	8000c68 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff f973 	bl	8000c68 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e118      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4b6c      	ldr	r3, [pc, #432]	@ (8001b44 <HAL_RCC_OscConfig+0x4b0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x31e>
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	4a65      	ldr	r2, [pc, #404]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x358>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x340>
 80019ba:	4b61      	ldr	r3, [pc, #388]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019be:	4a60      	ldr	r2, [pc, #384]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0x358>
 80019d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	4a59      	ldr	r2, [pc, #356]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e0:	4b57      	ldr	r3, [pc, #348]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e4:	4a56      	ldr	r2, [pc, #344]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d015      	beq.n	8001a20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff f938 	bl	8000c68 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff f934 	bl	8000c68 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0d7      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	4b4b      	ldr	r3, [pc, #300]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0ee      	beq.n	80019fc <HAL_RCC_OscConfig+0x368>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff f922 	bl	8000c68 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f7ff f91e 	bl	8000c68 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0c1      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3e:	4b40      	ldr	r3, [pc, #256]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ee      	bne.n	8001a28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	4a3a      	ldr	r2, [pc, #232]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ad 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d060      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d145      	bne.n	8001b06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b33      	ldr	r3, [pc, #204]	@ (8001b48 <HAL_RCC_OscConfig+0x4b4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff f8f2 	bl	8000c68 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f8ee 	bl	8000c68 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e093      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	071b      	lsls	r3, r3, #28
 8001ad2:	491b      	ldr	r1, [pc, #108]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_RCC_OscConfig+0x4b4>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f8c3 	bl	8000c68 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff f8bf 	bl	8000c68 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e064      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x452>
 8001b04:	e05c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_RCC_OscConfig+0x4b4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f8ac 	bl	8000c68 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f8a8 	bl	8000c68 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e04d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x480>
 8001b32:	e045      	b.n	8001bc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e040      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000
 8001b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_RCC_OscConfig+0x538>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d030      	beq.n	8001bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d129      	bne.n	8001bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d122      	bne.n	8001bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d119      	bne.n	8001bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10f      	bne.n	8001bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f839 	bl	8001c6e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 fa4a 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e041      	b.n	8001d18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe fe35 	bl	8000918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f000 f9f1 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e097      	b.n	8001e64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fe07 	bl	800095c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f000 f997 	bl	80020a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	4313      	orrs	r3, r2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001dc0:	f023 030c 	bic.w	r3, r3, #12
 8001dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	011a      	lsls	r2, r3, #4
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	031b      	lsls	r3, r3, #12
 8001df0:	4313      	orrs	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001dfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8001e06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4313      	orrs	r3, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_OC_ConfigChannel+0x1e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e048      	b.n	8001f1c <HAL_TIM_OC_ConfigChannel+0xb0>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d839      	bhi.n	8001f0c <HAL_TIM_OC_ConfigChannel+0xa0>
 8001e98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001ed5 	.word	0x08001ed5
 8001ea4:	08001f0d 	.word	0x08001f0d
 8001ea8:	08001f0d 	.word	0x08001f0d
 8001eac:	08001f0d 	.word	0x08001f0d
 8001eb0:	08001ee3 	.word	0x08001ee3
 8001eb4:	08001f0d 	.word	0x08001f0d
 8001eb8:	08001f0d 	.word	0x08001f0d
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	08001ef1 	.word	0x08001ef1
 8001ec4:	08001f0d 	.word	0x08001f0d
 8001ec8:	08001f0d 	.word	0x08001f0d
 8001ecc:	08001f0d 	.word	0x08001f0d
 8001ed0:	08001eff 	.word	0x08001eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f990 	bl	8002200 <TIM_OC1_SetConfig>
      break;
 8001ee0:	e017      	b.n	8001f12 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f9f9 	bl	80022e0 <TIM_OC2_SetConfig>
      break;
 8001eee:	e010      	b.n	8001f12 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fa68 	bl	80023cc <TIM_OC3_SetConfig>
      break;
 8001efc:	e009      	b.n	8001f12 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fad5 	bl	80024b4 <TIM_OC4_SetConfig>
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8001f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e0ae      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	f200 809f 	bhi.w	8002090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f52:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f8d 	.word	0x08001f8d
 8001f5c:	08002091 	.word	0x08002091
 8001f60:	08002091 	.word	0x08002091
 8001f64:	08002091 	.word	0x08002091
 8001f68:	08001fcd 	.word	0x08001fcd
 8001f6c:	08002091 	.word	0x08002091
 8001f70:	08002091 	.word	0x08002091
 8001f74:	08002091 	.word	0x08002091
 8001f78:	0800200f 	.word	0x0800200f
 8001f7c:	08002091 	.word	0x08002091
 8001f80:	08002091 	.word	0x08002091
 8001f84:	08002091 	.word	0x08002091
 8001f88:	0800204f 	.word	0x0800204f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f934 	bl	8002200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0204 	bic.w	r2, r2, #4
 8001fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6999      	ldr	r1, [r3, #24]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	619a      	str	r2, [r3, #24]
      break;
 8001fca:	e064      	b.n	8002096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f984 	bl	80022e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	021a      	lsls	r2, r3, #8
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	619a      	str	r2, [r3, #24]
      break;
 800200c:	e043      	b.n	8002096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f9d9 	bl	80023cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0208 	orr.w	r2, r2, #8
 8002028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0204 	bic.w	r2, r2, #4
 8002038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69d9      	ldr	r1, [r3, #28]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	61da      	str	r2, [r3, #28]
      break;
 800204c:	e023      	b.n	8002096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fa2d 	bl	80024b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69d9      	ldr	r1, [r3, #28]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	61da      	str	r2, [r3, #28]
      break;
 800208e:	e002      	b.n	8002096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	75fb      	strb	r3, [r7, #23]
      break;
 8002094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a46      	ldr	r2, [pc, #280]	@ (80021d4 <TIM_Base_SetConfig+0x12c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c6:	d00f      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a43      	ldr	r2, [pc, #268]	@ (80021d8 <TIM_Base_SetConfig+0x130>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00b      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a42      	ldr	r2, [pc, #264]	@ (80021dc <TIM_Base_SetConfig+0x134>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a41      	ldr	r2, [pc, #260]	@ (80021e0 <TIM_Base_SetConfig+0x138>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d003      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a40      	ldr	r2, [pc, #256]	@ (80021e4 <TIM_Base_SetConfig+0x13c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d108      	bne.n	80020fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a35      	ldr	r2, [pc, #212]	@ (80021d4 <TIM_Base_SetConfig+0x12c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02b      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002108:	d027      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a32      	ldr	r2, [pc, #200]	@ (80021d8 <TIM_Base_SetConfig+0x130>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d023      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a31      	ldr	r2, [pc, #196]	@ (80021dc <TIM_Base_SetConfig+0x134>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <TIM_Base_SetConfig+0x138>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01b      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2f      	ldr	r2, [pc, #188]	@ (80021e4 <TIM_Base_SetConfig+0x13c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d017      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2e      	ldr	r2, [pc, #184]	@ (80021e8 <TIM_Base_SetConfig+0x140>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2d      	ldr	r2, [pc, #180]	@ (80021ec <TIM_Base_SetConfig+0x144>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00f      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2c      	ldr	r2, [pc, #176]	@ (80021f0 <TIM_Base_SetConfig+0x148>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00b      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2b      	ldr	r2, [pc, #172]	@ (80021f4 <TIM_Base_SetConfig+0x14c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <TIM_Base_SetConfig+0x150>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d003      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a29      	ldr	r2, [pc, #164]	@ (80021fc <TIM_Base_SetConfig+0x154>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d108      	bne.n	800216c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a10      	ldr	r2, [pc, #64]	@ (80021d4 <TIM_Base_SetConfig+0x12c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0xf8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <TIM_Base_SetConfig+0x13c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
  }
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800
 80021f4:	40001800 	.word	0x40001800
 80021f8:	40001c00 	.word	0x40001c00
 80021fc:	40002000 	.word	0x40002000

08002200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 0201 	bic.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f023 0302 	bic.w	r3, r3, #2
 8002248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a20      	ldr	r2, [pc, #128]	@ (80022d8 <TIM_OC1_SetConfig+0xd8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_OC1_SetConfig+0x64>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <TIM_OC1_SetConfig+0xdc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10c      	bne.n	800227e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f023 0308 	bic.w	r3, r3, #8
 800226a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <TIM_OC1_SetConfig+0xd8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_OC1_SetConfig+0x8e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <TIM_OC1_SetConfig+0xdc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d111      	bne.n	80022b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800229c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010400 	.word	0x40010400

080022e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 0210 	bic.w	r2, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800230e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0320 	bic.w	r3, r3, #32
 800232a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a22      	ldr	r2, [pc, #136]	@ (80023c4 <TIM_OC2_SetConfig+0xe4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_OC2_SetConfig+0x68>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <TIM_OC2_SetConfig+0xe8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10d      	bne.n	8002364 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800234e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <TIM_OC2_SetConfig+0xe4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_OC2_SetConfig+0x94>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <TIM_OC2_SetConfig+0xe8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d113      	bne.n	800239c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800237a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	621a      	str	r2, [r3, #32]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010400 	.word	0x40010400

080023cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a21      	ldr	r2, [pc, #132]	@ (80024ac <TIM_OC3_SetConfig+0xe0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_OC3_SetConfig+0x66>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a20      	ldr	r2, [pc, #128]	@ (80024b0 <TIM_OC3_SetConfig+0xe4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10d      	bne.n	800244e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800244c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a16      	ldr	r2, [pc, #88]	@ (80024ac <TIM_OC3_SetConfig+0xe0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d003      	beq.n	800245e <TIM_OC3_SetConfig+0x92>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a15      	ldr	r2, [pc, #84]	@ (80024b0 <TIM_OC3_SetConfig+0xe4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d113      	bne.n	8002486 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800246c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	621a      	str	r2, [r3, #32]
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010400 	.word	0x40010400

080024b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	031b      	lsls	r3, r3, #12
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <TIM_OC4_SetConfig+0xa4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_OC4_SetConfig+0x68>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a11      	ldr	r2, [pc, #68]	@ (800255c <TIM_OC4_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d109      	bne.n	8002530 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002574:	2302      	movs	r3, #2
 8002576:	e05a      	b.n	800262e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a21      	ldr	r2, [pc, #132]	@ (800263c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c4:	d01d      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d018      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1a      	ldr	r2, [pc, #104]	@ (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a15      	ldr	r2, [pc, #84]	@ (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10c      	bne.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	4313      	orrs	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40010000 	.word	0x40010000
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800
 8002648:	40000c00 	.word	0x40000c00
 800264c:	40010400 	.word	0x40010400
 8002650:	40014000 	.word	0x40014000
 8002654:	40001800 	.word	0x40001800

08002658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002670:	2302      	movs	r3, #2
 8002672:	e03d      	b.n	80026f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <memset>:
 80026fc:	4402      	add	r2, r0
 80026fe:	4603      	mov	r3, r0
 8002700:	4293      	cmp	r3, r2
 8002702:	d100      	bne.n	8002706 <memset+0xa>
 8002704:	4770      	bx	lr
 8002706:	f803 1b01 	strb.w	r1, [r3], #1
 800270a:	e7f9      	b.n	8002700 <memset+0x4>

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	4d0d      	ldr	r5, [pc, #52]	@ (8002744 <__libc_init_array+0x38>)
 8002710:	4c0d      	ldr	r4, [pc, #52]	@ (8002748 <__libc_init_array+0x3c>)
 8002712:	1b64      	subs	r4, r4, r5
 8002714:	10a4      	asrs	r4, r4, #2
 8002716:	2600      	movs	r6, #0
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	4d0b      	ldr	r5, [pc, #44]	@ (800274c <__libc_init_array+0x40>)
 800271e:	4c0c      	ldr	r4, [pc, #48]	@ (8002750 <__libc_init_array+0x44>)
 8002720:	f000 f818 	bl	8002754 <_init>
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	2600      	movs	r6, #0
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	08002784 	.word	0x08002784
 8002748:	08002784 	.word	0x08002784
 800274c:	08002784 	.word	0x08002784
 8002750:	08002788 	.word	0x08002788

08002754 <_init>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr

08002760 <_fini>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr
