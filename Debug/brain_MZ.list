
brain_MZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004d18  08004d18  00005d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f08  08004f08  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004f10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000018  08004f28  00006018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004f28  000061d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c6f  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001954  00000000  00000000  0000fcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00011610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002167a  00000000  00000000  00012872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c428  00000000  00000000  00033eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce504  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  0010e85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00111768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d00 	.word	0x08004d00

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08004d00 	.word	0x08004d00

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f000 ffdd 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f85f 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea2:	f000 fa17 	bl	80012d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ea6:	f000 f96d 	bl	8001184 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eaa:	f000 f9bf 	bl	800122c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000eae:	f000 f8b7 	bl	8001020 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  set_right_encoder(&htim2,TIM2,400,4,1);
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000ebc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000ec0:	481d      	ldr	r0, [pc, #116]	@ (8000f38 <main+0xa4>)
 8000ec2:	f000 fa27 	bl	8001314 <set_right_encoder>
  set_left_encoder(&htim3,TIM3,400,4,-1);
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2304      	movs	r3, #4
 8000ece:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000ed2:	491a      	ldr	r1, [pc, #104]	@ (8000f3c <main+0xa8>)
 8000ed4:	481a      	ldr	r0, [pc, #104]	@ (8000f40 <main+0xac>)
 8000ed6:	f000 fa51 	bl	800137c <set_left_encoder>
  set_dimentions(right_radius,left_radius,spacing_encoder,spacing_wheel);
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <main+0xb0>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <main+0xb4>)
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <main+0xb8>)
 8000ee8:	edd3 6a00 	vldr	s13, [r3]
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <main+0xbc>)
 8000eee:	ed93 6a00 	vldr	s12, [r3]
 8000ef2:	eef0 1a46 	vmov.f32	s3, s12
 8000ef6:	eeb0 1a66 	vmov.f32	s2, s13
 8000efa:	eef0 0a47 	vmov.f32	s1, s14
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	f000 fb03 	bl	800150c <set_dimentions>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  speed_calcul();
 8000f06:	f000 fd13 	bl	8001930 <speed_calcul>
	  update_position();
 8000f0a:	f000 fb25 	bl	8001558 <update_position>
	  if(current_x=100){
 8000f0e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000f54 <main+0xc0>
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <main+0xc4>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
 8000f18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d004      	beq.n	8000f2c <main+0x98>
	  	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2120      	movs	r1, #32
 8000f26:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <main+0xc8>)
 8000f28:	f001 faa6 	bl	8002478 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f30:	f001 f804 	bl	8001f3c <HAL_Delay>
	  speed_calcul();
 8000f34:	e7e7      	b.n	8000f06 <main+0x72>
 8000f36:	bf00      	nop
 8000f38:	2000007c 	.word	0x2000007c
 8000f3c:	40000400 	.word	0x40000400
 8000f40:	200000c4 	.word	0x200000c4
 8000f44:	200001a0 	.word	0x200001a0
 8000f48:	2000019c 	.word	0x2000019c
 8000f4c:	200001a4 	.word	0x200001a4
 8000f50:	200001a8 	.word	0x200001a8
 8000f54:	42c80000 	.word	0x42c80000
 8000f58:	200001ac 	.word	0x200001ac
 8000f5c:	40020000 	.word	0x40020000

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	2234      	movs	r2, #52	@ 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fe14 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <SystemClock_Config+0xb8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <SystemClock_Config+0xb8>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <SystemClock_Config+0xb8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <SystemClock_Config+0xbc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <SystemClock_Config+0xbc>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <SystemClock_Config+0xbc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fcf9 	bl	80029cc <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fe0:	f000 f992 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fa54 	bl	80024ac <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800100a:	f000 f97d 	bl	8001308 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	@ 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b092      	sub	sp, #72	@ 0x48
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2220      	movs	r2, #32
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fda6 	bl	8003b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001050:	4b4a      	ldr	r3, [pc, #296]	@ (800117c <MX_TIM1_Init+0x15c>)
 8001052:	4a4b      	ldr	r2, [pc, #300]	@ (8001180 <MX_TIM1_Init+0x160>)
 8001054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001056:	4b49      	ldr	r3, [pc, #292]	@ (800117c <MX_TIM1_Init+0x15c>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b47      	ldr	r3, [pc, #284]	@ (800117c <MX_TIM1_Init+0x15c>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001062:	4b46      	ldr	r3, [pc, #280]	@ (800117c <MX_TIM1_Init+0x15c>)
 8001064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b44      	ldr	r3, [pc, #272]	@ (800117c <MX_TIM1_Init+0x15c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001070:	4b42      	ldr	r3, [pc, #264]	@ (800117c <MX_TIM1_Init+0x15c>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b41      	ldr	r3, [pc, #260]	@ (800117c <MX_TIM1_Init+0x15c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800107c:	483f      	ldr	r0, [pc, #252]	@ (800117c <MX_TIM1_Init+0x15c>)
 800107e:	f001 ff9c 	bl	8002fba <HAL_TIM_PWM_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001088:	f000 f93e 	bl	8001308 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800108c:	483b      	ldr	r0, [pc, #236]	@ (800117c <MX_TIM1_Init+0x15c>)
 800108e:	f001 ff3b 	bl	8002f08 <HAL_TIM_OC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001098:	f000 f936 	bl	8001308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010a8:	4619      	mov	r1, r3
 80010aa:	4834      	ldr	r0, [pc, #208]	@ (800117c <MX_TIM1_Init+0x15c>)
 80010ac:	f002 fca8 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80010b6:	f000 f927 	bl	8001308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	2360      	movs	r3, #96	@ 0x60
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	4827      	ldr	r0, [pc, #156]	@ (800117c <MX_TIM1_Init+0x15c>)
 80010e0:	f002 f94a 	bl	8003378 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80010ea:	f000 f90d 	bl	8001308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	2204      	movs	r2, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4821      	ldr	r0, [pc, #132]	@ (800117c <MX_TIM1_Init+0x15c>)
 80010f8:	f002 f93e 	bl	8003378 <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8001102:	f000 f901 	bl	8001308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110a:	2208      	movs	r2, #8
 800110c:	4619      	mov	r1, r3
 800110e:	481b      	ldr	r0, [pc, #108]	@ (800117c <MX_TIM1_Init+0x15c>)
 8001110:	f002 f932 	bl	8003378 <HAL_TIM_PWM_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800111a:	f000 f8f5 	bl	8001308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	220c      	movs	r2, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4814      	ldr	r0, [pc, #80]	@ (800117c <MX_TIM1_Init+0x15c>)
 800112c:	f002 f8c8 	bl	80032c0 <HAL_TIM_OC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001136:	f000 f8e7 	bl	8001308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800114e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001152:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <MX_TIM1_Init+0x15c>)
 800115e:	f002 fccb 	bl	8003af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001168:	f000 f8ce 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <MX_TIM1_Init+0x15c>)
 800116e:	f000 fdcd 	bl	8001d0c <HAL_TIM_MspPostInit>

}
 8001172:	bf00      	nop
 8001174:	3748      	adds	r7, #72	@ 0x48
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000034 	.word	0x20000034
 8001180:	40010000 	.word	0x40010000

08001184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	@ 0x30
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2224      	movs	r2, #36	@ 0x24
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fd02 	bl	8003b9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011c8:	2303      	movs	r3, #3
 80011ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011e0:	2301      	movs	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	480d      	ldr	r0, [pc, #52]	@ (8001228 <MX_TIM2_Init+0xa4>)
 80011f4:	f001 ff30 	bl	8003058 <HAL_TIM_Encoder_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011fe:	f000 f883 	bl	8001308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	@ (8001228 <MX_TIM2_Init+0xa4>)
 8001210:	f002 fbf6 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800121a:	f000 f875 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3730      	adds	r7, #48	@ 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000007c 	.word	0x2000007c

0800122c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2224      	movs	r2, #36	@ 0x24
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fcae 	bl	8003b9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <MX_TIM3_Init+0xa0>)
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <MX_TIM3_Init+0xa4>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_TIM3_Init+0xa0>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <MX_TIM3_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_TIM3_Init+0xa0>)
 800125c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_TIM3_Init+0xa0>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_TIM3_Init+0xa0>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800126e:	2303      	movs	r3, #3
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001286:	2301      	movs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <MX_TIM3_Init+0xa0>)
 800129a:	f001 fedd 	bl	8003058 <HAL_TIM_Encoder_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 f830 	bl	8001308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_TIM3_Init+0xa0>)
 80012b6:	f002 fba3 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012c0:	f000 f822 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3730      	adds	r7, #48	@ 0x30
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000c4 	.word	0x200000c4
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_GPIO_Init+0x30>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <MX_GPIO_Init+0x30>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_GPIO_Init+0x30>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <Error_Handler+0x8>

08001314 <set_right_encoder>:
volatile float current_phi_deg=90;

float ref_x,ref_y,dec=100;

void set_right_encoder(TIM_HandleTypeDef* htim, TIM_TypeDef* TIM, int resolution, int precision, int sens)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
	htim_right_encoder = htim;
 8001322:	4a10      	ldr	r2, [pc, #64]	@ (8001364 <set_right_encoder+0x50>)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6013      	str	r3, [r2, #0]
	right_TIM = TIM;
 8001328:	4a0f      	ldr	r2, [pc, #60]	@ (8001368 <set_right_encoder+0x54>)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	6013      	str	r3, [r2, #0]
	right_resolution = resolution;
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <set_right_encoder+0x58>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
	right_precision = precision;
 8001334:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <set_right_encoder+0x5c>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	6013      	str	r3, [r2, #0]
	right_sens=sens;
 800133a:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <set_right_encoder+0x60>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(htim_right_encoder,TIM_CHANNEL_1);
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <set_right_encoder+0x50>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f001 ff2c 	bl	80031a4 <HAL_TIM_Encoder_Start>
	right_TIM->CNT = 0;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <set_right_encoder+0x54>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24
	total_right_count = 0;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <set_right_encoder+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000114 	.word	0x20000114
 8001368:	20000118 	.word	0x20000118
 800136c:	2000011c 	.word	0x2000011c
 8001370:	20000120 	.word	0x20000120
 8001374:	20000124 	.word	0x20000124
 8001378:	20000134 	.word	0x20000134

0800137c <set_left_encoder>:

void set_left_encoder(TIM_HandleTypeDef* htim, TIM_TypeDef* TIM, int resolution, int precision, int sens)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
	htim_left_Encoder = htim;
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <set_left_encoder+0x50>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6013      	str	r3, [r2, #0]
	left_TIM = TIM;
 8001390:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <set_left_encoder+0x54>)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	6013      	str	r3, [r2, #0]
	left_resolution = resolution;
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <set_left_encoder+0x58>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6013      	str	r3, [r2, #0]
	left_precision = precision;
 800139c:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <set_left_encoder+0x5c>)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6013      	str	r3, [r2, #0]
	left_sens=sens;
 80013a2:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <set_left_encoder+0x60>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(htim_left_Encoder,TIM_CHANNEL_1);
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <set_left_encoder+0x50>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fef8 	bl	80031a4 <HAL_TIM_Encoder_Start>
	left_TIM->CNT = 0;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <set_left_encoder+0x54>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24
	total_left_count = 0;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <set_left_encoder+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000150 	.word	0x20000150
 80013d0:	20000154 	.word	0x20000154
 80013d4:	20000158 	.word	0x20000158
 80013d8:	2000015c 	.word	0x2000015c
 80013dc:	20000160 	.word	0x20000160
 80013e0:	20000170 	.word	0x20000170

080013e4 <read_right_encoder>:

void read_right_encoder(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	last_right_count = current_right_count;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <read_right_encoder+0x78>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <read_right_encoder+0x7c>)
 80013ee:	6013      	str	r3, [r2, #0]
	current_right_count = right_sens*right_TIM->CNT;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <read_right_encoder+0x80>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <read_right_encoder+0x84>)
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <read_right_encoder+0x78>)
 8001400:	6013      	str	r3, [r2, #0]
	d_right = current_right_count - last_right_count;
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <read_right_encoder+0x78>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <read_right_encoder+0x7c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	461a      	mov	r2, r3
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <read_right_encoder+0x88>)
 8001410:	601a      	str	r2, [r3, #0]
	if (d_right>30000)
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <read_right_encoder+0x88>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f247 5230 	movw	r2, #30000	@ 0x7530
 800141a:	4293      	cmp	r3, r2
 800141c:	dd06      	ble.n	800142c <read_right_encoder+0x48>
		d_right = d_right - 65535;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <read_right_encoder+0x88>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001426:	3bff      	subs	r3, #255	@ 0xff
 8001428:	4a10      	ldr	r2, [pc, #64]	@ (800146c <read_right_encoder+0x88>)
 800142a:	6013      	str	r3, [r2, #0]
	if (d_right<-30000)
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <read_right_encoder+0x88>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <read_right_encoder+0x8c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	da06      	bge.n	8001444 <read_right_encoder+0x60>
		d_right = d_right + 65535;
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <read_right_encoder+0x88>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800143e:	33ff      	adds	r3, #255	@ 0xff
 8001440:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <read_right_encoder+0x88>)
 8001442:	6013      	str	r3, [r2, #0]
	total_right_count = total_right_count + d_right;
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <read_right_encoder+0x90>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <read_right_encoder+0x88>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <read_right_encoder+0x90>)
 8001450:	6013      	str	r3, [r2, #0]
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	20000128 	.word	0x20000128
 8001460:	2000012c 	.word	0x2000012c
 8001464:	20000118 	.word	0x20000118
 8001468:	20000124 	.word	0x20000124
 800146c:	20000130 	.word	0x20000130
 8001470:	ffff8ad0 	.word	0xffff8ad0
 8001474:	20000134 	.word	0x20000134

08001478 <read_left_encoder>:

void read_left_encoder(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	last_left_count = current_left_count;
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <read_left_encoder+0x78>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <read_left_encoder+0x7c>)
 8001482:	6013      	str	r3, [r2, #0]
	current_left_count = left_sens*left_TIM->CNT;
 8001484:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <read_left_encoder+0x80>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148a:	4a1c      	ldr	r2, [pc, #112]	@ (80014fc <read_left_encoder+0x84>)
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <read_left_encoder+0x78>)
 8001494:	6013      	str	r3, [r2, #0]
	d_left = current_left_count - last_left_count;
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <read_left_encoder+0x78>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <read_left_encoder+0x7c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <read_left_encoder+0x88>)
 80014a4:	601a      	str	r2, [r3, #0]
	if (d_left>30000)
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <read_left_encoder+0x88>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f247 5230 	movw	r2, #30000	@ 0x7530
 80014ae:	4293      	cmp	r3, r2
 80014b0:	dd06      	ble.n	80014c0 <read_left_encoder+0x48>
		d_left = d_left - 65535;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <read_left_encoder+0x88>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80014ba:	3bff      	subs	r3, #255	@ 0xff
 80014bc:	4a10      	ldr	r2, [pc, #64]	@ (8001500 <read_left_encoder+0x88>)
 80014be:	6013      	str	r3, [r2, #0]
	if (d_left<-30000)
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <read_left_encoder+0x88>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <read_left_encoder+0x8c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	da06      	bge.n	80014d8 <read_left_encoder+0x60>
		d_left = d_left + 65535;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <read_left_encoder+0x88>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80014d2:	33ff      	adds	r3, #255	@ 0xff
 80014d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <read_left_encoder+0x88>)
 80014d6:	6013      	str	r3, [r2, #0]
	total_left_count = total_left_count + d_left;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <read_left_encoder+0x90>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <read_left_encoder+0x88>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <read_left_encoder+0x90>)
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000164 	.word	0x20000164
 80014f4:	20000168 	.word	0x20000168
 80014f8:	20000154 	.word	0x20000154
 80014fc:	20000160 	.word	0x20000160
 8001500:	2000016c 	.word	0x2000016c
 8001504:	ffff8ad0 	.word	0xffff8ad0
 8001508:	20000170 	.word	0x20000170

0800150c <set_dimentions>:

void set_dimentions(float right_wheel_radius, float left_wheel_radius, float encoder_spacing, float wheels_spacing)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	ed87 0a03 	vstr	s0, [r7, #12]
 8001516:	edc7 0a02 	vstr	s1, [r7, #8]
 800151a:	ed87 1a01 	vstr	s2, [r7, #4]
 800151e:	edc7 1a00 	vstr	s3, [r7]
	right_radius = right_wheel_radius;
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <set_dimentions+0x3c>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6013      	str	r3, [r2, #0]
	left_radius = left_wheel_radius;
 8001528:	4a08      	ldr	r2, [pc, #32]	@ (800154c <set_dimentions+0x40>)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	6013      	str	r3, [r2, #0]
	spacing_encoder = encoder_spacing;
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <set_dimentions+0x44>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6013      	str	r3, [r2, #0]
	spacing_wheel = wheels_spacing;
 8001534:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <set_dimentions+0x48>)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6013      	str	r3, [r2, #0]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200001a0 	.word	0x200001a0
 800154c:	2000019c 	.word	0x2000019c
 8001550:	200001a4 	.word	0x200001a4
 8001554:	200001a8 	.word	0x200001a8

08001558 <update_position>:

void update_position(void)
{
 8001558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800155c:	af00      	add	r7, sp, #0
	read_right_encoder();
 800155e:	f7ff ff41 	bl	80013e4 <read_right_encoder>
	read_left_encoder();
 8001562:	f7ff ff89 	bl	8001478 <read_left_encoder>
	dR = ticks_to_distance(d_right,right_radius,right_resolution,right_precision);
 8001566:	4b89      	ldr	r3, [pc, #548]	@ (800178c <update_position+0x234>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a89      	ldr	r2, [pc, #548]	@ (8001790 <update_position+0x238>)
 800156c:	edd2 7a00 	vldr	s15, [r2]
 8001570:	4a88      	ldr	r2, [pc, #544]	@ (8001794 <update_position+0x23c>)
 8001572:	6811      	ldr	r1, [r2, #0]
 8001574:	4a88      	ldr	r2, [pc, #544]	@ (8001798 <update_position+0x240>)
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	4618      	mov	r0, r3
 800157e:	f000 faab 	bl	8001ad8 <ticks_to_distance>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	4b85      	ldr	r3, [pc, #532]	@ (800179c <update_position+0x244>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
	total_right += dR;
 800158c:	4b83      	ldr	r3, [pc, #524]	@ (800179c <update_position+0x244>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	4b83      	ldr	r3, [pc, #524]	@ (80017a0 <update_position+0x248>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	4b80      	ldr	r3, [pc, #512]	@ (80017a0 <update_position+0x248>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	d_right_counter += dR;
 80015a2:	4b7e      	ldr	r3, [pc, #504]	@ (800179c <update_position+0x244>)
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	4b7e      	ldr	r3, [pc, #504]	@ (80017a4 <update_position+0x24c>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b2:	4b7c      	ldr	r3, [pc, #496]	@ (80017a4 <update_position+0x24c>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
	dL = ticks_to_distance(d_left,left_radius,left_resolution,left_precision);
 80015b8:	4b7b      	ldr	r3, [pc, #492]	@ (80017a8 <update_position+0x250>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a7b      	ldr	r2, [pc, #492]	@ (80017ac <update_position+0x254>)
 80015be:	edd2 7a00 	vldr	s15, [r2]
 80015c2:	4a7b      	ldr	r2, [pc, #492]	@ (80017b0 <update_position+0x258>)
 80015c4:	6811      	ldr	r1, [r2, #0]
 80015c6:	4a7b      	ldr	r2, [pc, #492]	@ (80017b4 <update_position+0x25c>)
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fa82 	bl	8001ad8 <ticks_to_distance>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	4b77      	ldr	r3, [pc, #476]	@ (80017b8 <update_position+0x260>)
 80015da:	edc3 7a00 	vstr	s15, [r3]
	total_left += dL;
 80015de:	4b76      	ldr	r3, [pc, #472]	@ (80017b8 <update_position+0x260>)
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <update_position+0x264>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	4b73      	ldr	r3, [pc, #460]	@ (80017bc <update_position+0x264>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]
	d_left_counter += dL;
 80015f4:	4b70      	ldr	r3, [pc, #448]	@ (80017b8 <update_position+0x260>)
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	4b71      	ldr	r3, [pc, #452]	@ (80017c0 <update_position+0x268>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	4b6e      	ldr	r3, [pc, #440]	@ (80017c0 <update_position+0x268>)
 8001606:	edc3 7a00 	vstr	s15, [r3]
	dC = (dR+dL)/2;
 800160a:	4b64      	ldr	r3, [pc, #400]	@ (800179c <update_position+0x244>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	4b69      	ldr	r3, [pc, #420]	@ (80017b8 <update_position+0x260>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800161e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001622:	4b68      	ldr	r3, [pc, #416]	@ (80017c4 <update_position+0x26c>)
 8001624:	edc3 7a00 	vstr	s15, [r3]
	total_centre+=dC;
 8001628:	4b66      	ldr	r3, [pc, #408]	@ (80017c4 <update_position+0x26c>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b66      	ldr	r3, [pc, #408]	@ (80017c8 <update_position+0x270>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <update_position+0x270>)
 800163a:	edc3 7a00 	vstr	s15, [r3]

	current_x += dC*cos(current_phi_rad);
 800163e:	4b61      	ldr	r3, [pc, #388]	@ (80017c4 <update_position+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff44 	bl	80004d0 <__aeabi_f2d>
 8001648:	4604      	mov	r4, r0
 800164a:	460d      	mov	r5, r1
 800164c:	4b5f      	ldr	r3, [pc, #380]	@ (80017cc <update_position+0x274>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff3d 	bl	80004d0 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	ec43 2b10 	vmov	d0, r2, r3
 800165e:	f002 facb 	bl	8003bf8 <cos>
 8001662:	ec53 2b10 	vmov	r2, r3, d0
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ff89 	bl	8000580 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <update_position+0x278>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff28 	bl	80004d0 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fdc4 	bl	8000214 <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa36 	bl	8000b04 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <update_position+0x278>)
 800169c:	6013      	str	r3, [r2, #0]
	current_y += dC*sin(current_phi_rad);
 800169e:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <update_position+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff14 	bl	80004d0 <__aeabi_f2d>
 80016a8:	4604      	mov	r4, r0
 80016aa:	460d      	mov	r5, r1
 80016ac:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <update_position+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff0d 	bl	80004d0 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ec43 2b10 	vmov	d0, r2, r3
 80016be:	f002 faef 	bl	8003ca0 <sin>
 80016c2:	ec53 2b10 	vmov	r2, r3, d0
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe ff59 	bl	8000580 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	461d      	mov	r5, r3
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <update_position+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fef8 	bl	80004d0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fd94 	bl	8000214 <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa06 	bl	8000b04 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a36      	ldr	r2, [pc, #216]	@ (80017d4 <update_position+0x27c>)
 80016fc:	6013      	str	r3, [r2, #0]
	current_phi_rad += ((dR-dL)/spacing_encoder);
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <update_position+0x244>)
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	4b2c      	ldr	r3, [pc, #176]	@ (80017b8 <update_position+0x260>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <update_position+0x280>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001718:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <update_position+0x274>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <update_position+0x274>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
	d_phi_counter += ((dR-dL)/spacing_encoder);
 8001728:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <update_position+0x244>)
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <update_position+0x260>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <update_position+0x280>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001742:	ee16 0a90 	vmov	r0, s13
 8001746:	f7fe fec3 	bl	80004d0 <__aeabi_f2d>
 800174a:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <update_position+0x284>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fd60 	bl	8000214 <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4920      	ldr	r1, [pc, #128]	@ (80017dc <update_position+0x284>)
 800175a:	e9c1 2300 	strd	r2, r3, [r1]
	while (current_phi_rad>PI)
 800175e:	e009      	b.n	8001774 <update_position+0x21c>
	{
		current_phi_rad -= 2*PI;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <update_position+0x274>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80017e0 <update_position+0x288>
 800176a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <update_position+0x274>)
 8001770:	edc3 7a00 	vstr	s15, [r3]
	while (current_phi_rad>PI)
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <update_position+0x274>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80017e4 <update_position+0x28c>
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	dceb      	bgt.n	8001760 <update_position+0x208>
	}
	while (current_phi_rad<-PI)
 8001788:	e038      	b.n	80017fc <update_position+0x2a4>
 800178a:	bf00      	nop
 800178c:	20000130 	.word	0x20000130
 8001790:	200001a0 	.word	0x200001a0
 8001794:	2000011c 	.word	0x2000011c
 8001798:	20000120 	.word	0x20000120
 800179c:	20000190 	.word	0x20000190
 80017a0:	20000138 	.word	0x20000138
 80017a4:	2000013c 	.word	0x2000013c
 80017a8:	2000016c 	.word	0x2000016c
 80017ac:	2000019c 	.word	0x2000019c
 80017b0:	20000158 	.word	0x20000158
 80017b4:	2000015c 	.word	0x2000015c
 80017b8:	20000194 	.word	0x20000194
 80017bc:	20000174 	.word	0x20000174
 80017c0:	20000178 	.word	0x20000178
 80017c4:	20000198 	.word	0x20000198
 80017c8:	2000017c 	.word	0x2000017c
 80017cc:	20000000 	.word	0x20000000
 80017d0:	200001ac 	.word	0x200001ac
 80017d4:	200001b0 	.word	0x200001b0
 80017d8:	200001a4 	.word	0x200001a4
 80017dc:	200001c0 	.word	0x200001c0
 80017e0:	40c90fdb 	.word	0x40c90fdb
 80017e4:	40490fdb 	.word	0x40490fdb
	{
		current_phi_rad += 2*PI;
 80017e8:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <update_position+0x3ac>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001908 <update_position+0x3b0>
 80017f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f6:	4b43      	ldr	r3, [pc, #268]	@ (8001904 <update_position+0x3ac>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
	while (current_phi_rad<-PI)
 80017fc:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <update_position+0x3ac>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800190c <update_position+0x3b4>
 8001806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d4eb      	bmi.n	80017e8 <update_position+0x290>
	}
	current_phi_deg = rad_to_deg(current_phi_rad);
 8001810:	4b3c      	ldr	r3, [pc, #240]	@ (8001904 <update_position+0x3ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe5b 	bl	80004d0 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f000 f985 	bl	8001b30 <rad_to_deg>
 8001826:	eef0 7a40 	vmov.f32	s15, s0
 800182a:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <update_position+0x3b8>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
	//Robot navi 2020
	millis++;
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <update_position+0x3bc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a37      	ldr	r2, [pc, #220]	@ (8001914 <update_position+0x3bc>)
 8001838:	6013      	str	r3, [r2, #0]
	t++;
 800183a:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <update_position+0x3c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a35      	ldr	r2, [pc, #212]	@ (8001918 <update_position+0x3c0>)
 8001842:	6013      	str	r3, [r2, #0]
	ref_x = current_x + cos(current_phi_rad) *dec;
 8001844:	4b35      	ldr	r3, [pc, #212]	@ (800191c <update_position+0x3c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe41 	bl	80004d0 <__aeabi_f2d>
 800184e:	4604      	mov	r4, r0
 8001850:	460d      	mov	r5, r1
 8001852:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <update_position+0x3ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe3a 	bl	80004d0 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ec43 2b10 	vmov	d0, r2, r3
 8001864:	f002 f9c8 	bl	8003bf8 <cos>
 8001868:	ec59 8b10 	vmov	r8, r9, d0
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <update_position+0x3c8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe2d 	bl	80004d0 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4640      	mov	r0, r8
 800187c:	4649      	mov	r1, r9
 800187e:	f7fe fe7f 	bl	8000580 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fcc3 	bl	8000214 <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f935 	bl	8000b04 <__aeabi_d2f>
 800189a:	4603      	mov	r3, r0
 800189c:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <update_position+0x3cc>)
 800189e:	6013      	str	r3, [r2, #0]
	ref_y = current_y + sin(current_phi_rad) *dec;
 80018a0:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <update_position+0x3d0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe13 	bl	80004d0 <__aeabi_f2d>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <update_position+0x3ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe0c 	bl	80004d0 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	ec43 2b10 	vmov	d0, r2, r3
 80018c0:	f002 f9ee 	bl	8003ca0 <sin>
 80018c4:	ec59 8b10 	vmov	r8, r9, d0
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <update_position+0x3c8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fdff 	bl	80004d0 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4640      	mov	r0, r8
 80018d8:	4649      	mov	r1, r9
 80018da:	f7fe fe51 	bl	8000580 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fc95 	bl	8000214 <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f907 	bl	8000b04 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <update_position+0x3d4>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000
 8001908:	40c90fdb 	.word	0x40c90fdb
 800190c:	c0490fdb 	.word	0xc0490fdb
 8001910:	20000004 	.word	0x20000004
 8001914:	2000010c 	.word	0x2000010c
 8001918:	20000110 	.word	0x20000110
 800191c:	200001ac 	.word	0x200001ac
 8001920:	20000008 	.word	0x20000008
 8001924:	200001c8 	.word	0x200001c8
 8001928:	200001b0 	.word	0x200001b0
 800192c:	200001cc 	.word	0x200001cc

08001930 <speed_calcul>:

void speed_calcul(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	right_encoder_speed = d_right_counter/T*1000;
 8001934:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa8 <speed_calcul+0x178>)
 8001936:	ed93 7a00 	vldr	s14, [r3]
 800193a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001aac <speed_calcul+0x17c>
 8001946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194a:	ee17 0a90 	vmov	r0, s15
 800194e:	f7fe fdbf 	bl	80004d0 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4956      	ldr	r1, [pc, #344]	@ (8001ab0 <speed_calcul+0x180>)
 8001958:	e9c1 2300 	strd	r2, r3, [r1]
	d_right_counter = 0;
 800195c:	4b52      	ldr	r3, [pc, #328]	@ (8001aa8 <speed_calcul+0x178>)
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
	left_encoder_speed = d_left_counter/T*1000;
 8001964:	4b53      	ldr	r3, [pc, #332]	@ (8001ab4 <speed_calcul+0x184>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001aac <speed_calcul+0x17c>
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	ee17 0a90 	vmov	r0, s15
 800197e:	f7fe fda7 	bl	80004d0 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	494c      	ldr	r1, [pc, #304]	@ (8001ab8 <speed_calcul+0x188>)
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
	d_left_counter = 0;
 800198c:	4b49      	ldr	r3, [pc, #292]	@ (8001ab4 <speed_calcul+0x184>)
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
	phi_speed = d_phi_counter/T*1000;
 8001994:	4b49      	ldr	r3, [pc, #292]	@ (8001abc <speed_calcul+0x18c>)
 8001996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	4b48      	ldr	r3, [pc, #288]	@ (8001ac0 <speed_calcul+0x190>)
 80019a0:	f7fe ff18 	bl	80007d4 <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b44      	ldr	r3, [pc, #272]	@ (8001ac4 <speed_calcul+0x194>)
 80019b2:	f7fe fde5 	bl	8000580 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4943      	ldr	r1, [pc, #268]	@ (8001ac8 <speed_calcul+0x198>)
 80019bc:	e9c1 2300 	strd	r2, r3, [r1]
	d_phi_counter = 0;
 80019c0:	493e      	ldr	r1, [pc, #248]	@ (8001abc <speed_calcul+0x18c>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9c1 2300 	strd	r2, r3, [r1]
	right_speed = (right_encoder_speed + left_encoder_speed)/2 + phi_speed * spacing_wheel/2;
 80019ce:	4b38      	ldr	r3, [pc, #224]	@ (8001ab0 <speed_calcul+0x180>)
 80019d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <speed_calcul+0x188>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fc1b 	bl	8000214 <__adddf3>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ee:	f7fe fef1 	bl	80007d4 <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <speed_calcul+0x19c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd66 	bl	80004d0 <__aeabi_f2d>
 8001a04:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <speed_calcul+0x198>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fdb9 	bl	8000580 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a1e:	f7fe fed9 	bl	80007d4 <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7fe fbf3 	bl	8000214 <__adddf3>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4927      	ldr	r1, [pc, #156]	@ (8001ad0 <speed_calcul+0x1a0>)
 8001a34:	e9c1 2300 	strd	r2, r3, [r1]
	left_speed = (right_encoder_speed + left_encoder_speed)/2 - phi_speed * spacing_wheel/2;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <speed_calcul+0x180>)
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <speed_calcul+0x188>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fbe6 	bl	8000214 <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a58:	f7fe febc 	bl	80007d4 <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4614      	mov	r4, r2
 8001a62:	461d      	mov	r5, r3
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <speed_calcul+0x19c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd31 	bl	80004d0 <__aeabi_f2d>
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <speed_calcul+0x198>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fd84 	bl	8000580 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a88:	f7fe fea4 	bl	80007d4 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4620      	mov	r0, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	f7fe fbbc 	bl	8000210 <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	490d      	ldr	r1, [pc, #52]	@ (8001ad4 <speed_calcul+0x1a4>)
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001aa2:	bf00      	nop
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000013c 	.word	0x2000013c
 8001aac:	447a0000 	.word	0x447a0000
 8001ab0:	20000148 	.word	0x20000148
 8001ab4:	20000178 	.word	0x20000178
 8001ab8:	20000188 	.word	0x20000188
 8001abc:	200001c0 	.word	0x200001c0
 8001ac0:	40240000 	.word	0x40240000
 8001ac4:	408f4000 	.word	0x408f4000
 8001ac8:	200001b8 	.word	0x200001b8
 8001acc:	200001a8 	.word	0x200001a8
 8001ad0:	20000140 	.word	0x20000140
 8001ad4:	20000180 	.word	0x20000180

08001ad8 <ticks_to_distance>:
	current_phi_deg = 0;
	current_phi_rad = 0;
}

float ticks_to_distance(int x, float r, int resolution, int precision)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ae4:	6079      	str	r1, [r7, #4]
 8001ae6:	603a      	str	r2, [r7, #0]
	return (x*2*PI*r/(resolution*precision));
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001b2c <ticks_to_distance+0x54>
 8001af8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b18:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40490fdb 	.word	0x40490fdb

08001b30 <rad_to_deg>:

float rad_to_deg(double x)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	ed87 0b00 	vstr	d0, [r7]
	return (x*360/(2*PI));
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <rad_to_deg+0x50>)
 8001b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b44:	f7fe fd1c 	bl	8000580 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	a309      	add	r3, pc, #36	@ (adr r3, 8001b78 <rad_to_deg+0x48>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fe3d 	bl	80007d4 <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7fe ffcf 	bl	8000b04 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	ee07 3a90 	vmov	s15, r3
}
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	60000000 	.word	0x60000000
 8001b7c:	401921fb 	.word	0x401921fb
 8001b80:	40768000 	.word	0x40768000

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_TIM_PWM_MspInit+0x40>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_TIM_PWM_MspInit+0x40>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_TIM_PWM_MspInit+0x40>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c38:	d12c      	bne.n	8001c94 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	4b30      	ldr	r3, [pc, #192]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a2f      	ldr	r2, [pc, #188]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a28      	ldr	r2, [pc, #160]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c82:	2301      	movs	r3, #1
 8001c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481d      	ldr	r0, [pc, #116]	@ (8001d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c8e:	f000 fa5f 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c92:	e030      	b.n	8001cf6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12b      	bne.n	8001cf6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd6:	23c0      	movs	r3, #192	@ 0xc0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cf2:	f000 fa2d 	bl	8002150 <HAL_GPIO_Init>
}
 8001cf6:	bf00      	nop
 8001cf8:	3730      	adds	r7, #48	@ 0x30
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40000400 	.word	0x40000400

08001d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <HAL_TIM_MspPostInit+0x68>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d11e      	bne.n	8001d6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d4a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <HAL_TIM_MspPostInit+0x70>)
 8001d68:	f000 f9f2 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f891 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e08:	f7ff ffea 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	@ (8001e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	@ (8001e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f001 febb 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7ff f82d 	bl	8000e94 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001e48:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 8001e4c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001e50:	200001d4 	.word	0x200001d4

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	@ (8001e98 <HAL_Init+0x40>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_Init+0x40>)
 8001e6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <HAL_Init+0x40>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f931 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	200f      	movs	r0, #15
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fe7a 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f93b 	bl	8002136 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 f911 	bl	80020fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	@ (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	20000014 	.word	0x20000014
 8001ef8:	20000010 	.word	0x20000010

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000014 	.word	0x20000014
 8001f20:	200001d0 	.word	0x200001d0

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200001d0 	.word	0x200001d0

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000014 	.word	0x20000014

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	@ (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	@ (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b4:	d301      	bcc.n	80020ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00f      	b.n	80020da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <SysTick_Config+0x40>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c2:	210f      	movs	r1, #15
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f7ff ff8e 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <SysTick_Config+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <SysTick_Config+0x40>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff47 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff5c 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff8e 	bl	800203c <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffb0 	bl	80020a4 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e165      	b.n	8002438 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8154 	bne.w	8002432 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80ae 	beq.w	8002432 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b5d      	ldr	r3, [pc, #372]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a5c      	ldr	r2, [pc, #368]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a58      	ldr	r2, [pc, #352]	@ (8002454 <HAL_GPIO_Init+0x304>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4f      	ldr	r2, [pc, #316]	@ (8002458 <HAL_GPIO_Init+0x308>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x21a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4e      	ldr	r2, [pc, #312]	@ (800245c <HAL_GPIO_Init+0x30c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x216>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4d      	ldr	r2, [pc, #308]	@ (8002460 <HAL_GPIO_Init+0x310>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x212>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4c      	ldr	r2, [pc, #304]	@ (8002464 <HAL_GPIO_Init+0x314>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x20e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	@ (8002468 <HAL_GPIO_Init+0x318>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x20a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4a      	ldr	r2, [pc, #296]	@ (800246c <HAL_GPIO_Init+0x31c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x206>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a49      	ldr	r2, [pc, #292]	@ (8002470 <HAL_GPIO_Init+0x320>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x202>
 800234e:	2306      	movs	r3, #6
 8002350:	e00c      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002352:	2307      	movs	r3, #7
 8002354:	e00a      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002356:	2305      	movs	r3, #5
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x21c>
 800235a:	2304      	movs	r3, #4
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x21c>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x21c>
 800236a:	2300      	movs	r3, #0
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	@ (8002454 <HAL_GPIO_Init+0x304>)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <HAL_GPIO_Init+0x324>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a31      	ldr	r2, [pc, #196]	@ (8002474 <HAL_GPIO_Init+0x324>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_GPIO_Init+0x324>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a26      	ldr	r2, [pc, #152]	@ (8002474 <HAL_GPIO_Init+0x324>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023de:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_GPIO_Init+0x324>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002402:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <HAL_GPIO_Init+0x324>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002408:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <HAL_GPIO_Init+0x324>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242c:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <HAL_GPIO_Init+0x324>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	f67f ae96 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40021400 	.word	0x40021400
 8002470:	40021800 	.word	0x40021800
 8002474:	40013c00 	.word	0x40013c00

08002478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002494:	e003      	b.n	800249e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	041a      	lsls	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff fcc2 	bl	8001f24 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff fcbe 	bl	8001f24 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fc22 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	08004d18 	.word	0x08004d18
 8002670:	2000000c 	.word	0x2000000c
 8002674:	20000010 	.word	0x20000010

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b0a6      	sub	sp, #152	@ 0x98
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269e:	4bc8      	ldr	r3, [pc, #800]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	f200 817e 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x330>
 80026ac:	a201      	add	r2, pc, #4	@ (adr r2, 80026b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	080029a9 	.word	0x080029a9
 80026bc:	080029a9 	.word	0x080029a9
 80026c0:	080029a9 	.word	0x080029a9
 80026c4:	080026f1 	.word	0x080026f1
 80026c8:	080029a9 	.word	0x080029a9
 80026cc:	080029a9 	.word	0x080029a9
 80026d0:	080029a9 	.word	0x080029a9
 80026d4:	080026f9 	.word	0x080026f9
 80026d8:	080029a9 	.word	0x080029a9
 80026dc:	080029a9 	.word	0x080029a9
 80026e0:	080029a9 	.word	0x080029a9
 80026e4:	08002863 	.word	0x08002863
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4bb6      	ldr	r3, [pc, #728]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80026ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026ee:	e15f      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f0:	4bb5      	ldr	r3, [pc, #724]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x350>)
 80026f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026f6:	e15b      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f8:	4bb1      	ldr	r3, [pc, #708]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002704:	4bae      	ldr	r3, [pc, #696]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d031      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002710:	4bab      	ldr	r3, [pc, #684]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	2200      	movs	r2, #0
 8002718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800271a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800271c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800271e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002722:	663b      	str	r3, [r7, #96]	@ 0x60
 8002724:	2300      	movs	r3, #0
 8002726:	667b      	str	r3, [r7, #100]	@ 0x64
 8002728:	4ba7      	ldr	r3, [pc, #668]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800272a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800272e:	462a      	mov	r2, r5
 8002730:	fb03 f202 	mul.w	r2, r3, r2
 8002734:	2300      	movs	r3, #0
 8002736:	4621      	mov	r1, r4
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	4aa2      	ldr	r2, [pc, #648]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002740:	4621      	mov	r1, r4
 8002742:	fba1 1202 	umull	r1, r2, r1, r2
 8002746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002748:	460a      	mov	r2, r1
 800274a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800274c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800274e:	4413      	add	r3, r2
 8002750:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002756:	2200      	movs	r2, #0
 8002758:	65bb      	str	r3, [r7, #88]	@ 0x58
 800275a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800275c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002760:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002764:	f7fe fa1e 	bl	8000ba4 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002772:	e064      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b92      	ldr	r3, [pc, #584]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	653b      	str	r3, [r7, #80]	@ 0x50
 800277e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002788:	2300      	movs	r3, #0
 800278a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800278c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002790:	4622      	mov	r2, r4
 8002792:	462b      	mov	r3, r5
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a2:	0150      	lsls	r0, r2, #5
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4621      	mov	r1, r4
 80027aa:	1a51      	subs	r1, r2, r1
 80027ac:	6139      	str	r1, [r7, #16]
 80027ae:	4629      	mov	r1, r5
 80027b0:	eb63 0301 	sbc.w	r3, r3, r1
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027c2:	4659      	mov	r1, fp
 80027c4:	018b      	lsls	r3, r1, #6
 80027c6:	4651      	mov	r1, sl
 80027c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027cc:	4651      	mov	r1, sl
 80027ce:	018a      	lsls	r2, r1, #6
 80027d0:	4651      	mov	r1, sl
 80027d2:	ebb2 0801 	subs.w	r8, r2, r1
 80027d6:	4659      	mov	r1, fp
 80027d8:	eb63 0901 	sbc.w	r9, r3, r1
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f0:	4690      	mov	r8, r2
 80027f2:	4699      	mov	r9, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	eb18 0303 	adds.w	r3, r8, r3
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	462b      	mov	r3, r5
 80027fe:	eb49 0303 	adc.w	r3, r9, r3
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002810:	4629      	mov	r1, r5
 8002812:	028b      	lsls	r3, r1, #10
 8002814:	4621      	mov	r1, r4
 8002816:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800281a:	4621      	mov	r1, r4
 800281c:	028a      	lsls	r2, r1, #10
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002826:	2200      	movs	r2, #0
 8002828:	643b      	str	r3, [r7, #64]	@ 0x40
 800282a:	647a      	str	r2, [r7, #68]	@ 0x44
 800282c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002830:	f7fe f9b8 	bl	8000ba4 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800283e:	4b60      	ldr	r3, [pc, #384]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	3301      	adds	r3, #1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002850:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002860:	e0a6      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002862:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800286a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286e:	4b54      	ldr	r3, [pc, #336]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02a      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287a:	4b51      	ldr	r3, [pc, #324]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	2200      	movs	r2, #0
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002884:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800288c:	2100      	movs	r1, #0
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002890:	fb03 f201 	mul.w	r2, r3, r1
 8002894:	2300      	movs	r3, #0
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	4413      	add	r3, r2
 800289c:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800289e:	fba0 1202 	umull	r1, r2, r0, r2
 80028a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80028a4:	460a      	mov	r2, r1
 80028a6:	673a      	str	r2, [r7, #112]	@ 0x70
 80028a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028aa:	4413      	add	r3, r2
 80028ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b2:	2200      	movs	r2, #0
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80028b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80028b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80028c0:	f7fe f970 	bl	8000ba4 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4613      	mov	r3, r2
 80028ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028ce:	e05b      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d0:	4b3b      	ldr	r3, [pc, #236]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	2200      	movs	r2, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	0159      	lsls	r1, r3, #5
 80028fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fe:	0150      	lsls	r0, r2, #5
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4641      	mov	r1, r8
 8002906:	ebb2 0a01 	subs.w	sl, r2, r1
 800290a:	4649      	mov	r1, r9
 800290c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800291c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002920:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002924:	ebb2 040a 	subs.w	r4, r2, sl
 8002928:	eb63 050b 	sbc.w	r5, r3, fp
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	00eb      	lsls	r3, r5, #3
 8002936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293a:	00e2      	lsls	r2, r4, #3
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	4643      	mov	r3, r8
 8002942:	18e3      	adds	r3, r4, r3
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	464b      	mov	r3, r9
 8002948:	eb45 0303 	adc.w	r3, r5, r3
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295a:	4629      	mov	r1, r5
 800295c:	028b      	lsls	r3, r1, #10
 800295e:	4621      	mov	r1, r4
 8002960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002964:	4621      	mov	r1, r4
 8002966:	028a      	lsls	r2, r1, #10
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002970:	2200      	movs	r2, #0
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297a:	f7fe f913 	bl	8000ba4 <__aeabi_uldivmod>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4613      	mov	r3, r2
 8002984:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002988:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0f1b      	lsrs	r3, r3, #28
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800299a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029a6:	e003      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80029aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3798      	adds	r7, #152	@ 0x98
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	017d7840 	.word	0x017d7840

080029cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e28d      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8083 	beq.w	8002af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029ec:	4b94      	ldr	r3, [pc, #592]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d019      	beq.n	8002a2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029f8:	4b91      	ldr	r3, [pc, #580]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a04:	4b8e      	ldr	r3, [pc, #568]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a10:	d00c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4b8b      	ldr	r3, [pc, #556]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d112      	bne.n	8002a44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b88      	ldr	r3, [pc, #544]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4b84      	ldr	r3, [pc, #528]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x124>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d157      	bne.n	8002af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e25a      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0x90>
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7b      	ldr	r2, [pc, #492]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xcc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0xb4>
 8002a66:	4b76      	ldr	r3, [pc, #472]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a75      	ldr	r2, [pc, #468]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b73      	ldr	r3, [pc, #460]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a72      	ldr	r2, [pc, #456]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xcc>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6b      	ldr	r2, [pc, #428]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fa40 	bl	8001f24 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fa3c 	bl	8001f24 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e21f      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b61      	ldr	r3, [pc, #388]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xdc>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fa2c 	bl	8001f24 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fa28 	bl	8001f24 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e20b      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x104>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06f      	beq.n	8002bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002afe:	4b50      	ldr	r3, [pc, #320]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d105      	bne.n	8002b22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b47      	ldr	r3, [pc, #284]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b44      	ldr	r3, [pc, #272]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b41      	ldr	r3, [pc, #260]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x186>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1d3      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4937      	ldr	r1, [pc, #220]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b34      	ldr	r3, [pc, #208]	@ (8002c44 <HAL_RCC_OscConfig+0x278>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7ff f9d5 	bl	8001f24 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7ff f9d1 	bl	8001f24 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1b4      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b28      	ldr	r3, [pc, #160]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4925      	ldr	r1, [pc, #148]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b24      	ldr	r3, [pc, #144]	@ (8002c44 <HAL_RCC_OscConfig+0x278>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f9b4 	bl	8001f24 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f9b0 	bl	8001f24 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e193      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d036      	beq.n	8002c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7ff f994 	bl	8001f24 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff f990 	bl	8001f24 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e173      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x234>
 8002c1e:	e01b      	b.n	8002c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c20:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7ff f97d 	bl	8001f24 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	e00e      	b.n	8002c4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7ff f979 	bl	8001f24 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d907      	bls.n	8002c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e15c      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	42470000 	.word	0x42470000
 8002c48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ea      	bne.n	8002c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8097 	beq.w	8002d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6a:	4b83      	ldr	r3, [pc, #524]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c86:	4b7c      	ldr	r3, [pc, #496]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b79      	ldr	r3, [pc, #484]	@ (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a75      	ldr	r2, [pc, #468]	@ (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7ff f939 	bl	8001f24 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7ff f935 	bl	8001f24 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e118      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x31e>
 8002cdc:	4b66      	ldr	r3, [pc, #408]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a65      	ldr	r2, [pc, #404]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCC_OscConfig+0x358>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x340>
 8002cf2:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	4a60      	ldr	r2, [pc, #384]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a5d      	ldr	r2, [pc, #372]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0x358>
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4a59      	ldr	r2, [pc, #356]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d18:	4b57      	ldr	r3, [pc, #348]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f023 0304 	bic.w	r3, r3, #4
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7ff f8fa 	bl	8001f24 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7ff f8f6 	bl	8001f24 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0d7      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ee      	beq.n	8002d34 <HAL_RCC_OscConfig+0x368>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7ff f8e4 	bl	8001f24 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7ff f8e0 	bl	8001f24 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0c1      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d76:	4b40      	ldr	r3, [pc, #256]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ee      	bne.n	8002d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b3b      	ldr	r3, [pc, #236]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80ad 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d9e:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d060      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d145      	bne.n	8002e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b33      	ldr	r3, [pc, #204]	@ (8002e80 <HAL_RCC_OscConfig+0x4b4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff f8b4 	bl	8001f24 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7ff f8b0 	bl	8001f24 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e093      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	071b      	lsls	r3, r3, #28
 8002e0a:	491b      	ldr	r1, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_RCC_OscConfig+0x4b4>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7ff f885 	bl	8001f24 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7ff f881 	bl	8001f24 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e064      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x452>
 8002e3c:	e05c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_RCC_OscConfig+0x4b4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7ff f86e 	bl	8001f24 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7ff f86a 	bl	8001f24 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04d      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x480>
 8002e6a:	e045      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e040      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	@ (8002f04 <HAL_RCC_OscConfig+0x538>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d030      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d129      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d122      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d119      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e041      	b.n	8002f9e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f839 	bl	8002fa6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 fad8 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e041      	b.n	8003050 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe fdf7 	bl	8001bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 fa7f 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e097      	b.n	800319c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe fdc9 	bl	8001c18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800309c:	f023 0307 	bic.w	r3, r3, #7
 80030a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f000 fa25 	bl	80034fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4313      	orrs	r3, r2
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80030f8:	f023 030c 	bic.w	r3, r3, #12
 80030fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003104:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	4313      	orrs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	011a      	lsls	r2, r3, #4
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	031b      	lsls	r3, r3, #12
 8003128:	4313      	orrs	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003136:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4313      	orrs	r3, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031da:	7b7b      	ldrb	r3, [r7, #13]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e069      	b.n	80032b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031f4:	e031      	b.n	800325a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d110      	bne.n	800321e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031fc:	7bbb      	ldrb	r3, [r7, #14]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003202:	7b3b      	ldrb	r3, [r7, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d001      	beq.n	800320c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e055      	b.n	80032b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800321c:	e01d      	b.n	800325a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800322a:	7b7b      	ldrb	r3, [r7, #13]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d102      	bne.n	8003236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003230:	7b3b      	ldrb	r3, [r7, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d001      	beq.n	800323a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e03e      	b.n	80032b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_TIM_Encoder_Start+0xc4>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d008      	beq.n	8003278 <HAL_TIM_Encoder_Start+0xd4>
 8003266:	e00f      	b.n	8003288 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2201      	movs	r2, #1
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fb9f 	bl	80039b4 <TIM_CCxChannelCmd>
      break;
 8003276:	e016      	b.n	80032a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	2104      	movs	r1, #4
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fb97 	bl	80039b4 <TIM_CCxChannelCmd>
      break;
 8003286:	e00e      	b.n	80032a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2201      	movs	r2, #1
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fb8f 	bl	80039b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	2104      	movs	r1, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fb88 	bl	80039b4 <TIM_CCxChannelCmd>
      break;
 80032a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_TIM_OC_ConfigChannel+0x1e>
 80032da:	2302      	movs	r3, #2
 80032dc:	e048      	b.n	8003370 <HAL_TIM_OC_ConfigChannel+0xb0>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d839      	bhi.n	8003360 <HAL_TIM_OC_ConfigChannel+0xa0>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003361 	.word	0x08003361
 80032fc:	08003361 	.word	0x08003361
 8003300:	08003361 	.word	0x08003361
 8003304:	08003337 	.word	0x08003337
 8003308:	08003361 	.word	0x08003361
 800330c:	08003361 	.word	0x08003361
 8003310:	08003361 	.word	0x08003361
 8003314:	08003345 	.word	0x08003345
 8003318:	08003361 	.word	0x08003361
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	08003353 	.word	0x08003353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f990 	bl	8003654 <TIM_OC1_SetConfig>
      break;
 8003334:	e017      	b.n	8003366 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f9f9 	bl	8003734 <TIM_OC2_SetConfig>
      break;
 8003342:	e010      	b.n	8003366 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fa68 	bl	8003820 <TIM_OC3_SetConfig>
      break;
 8003350:	e009      	b.n	8003366 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fad5 	bl	8003908 <TIM_OC4_SetConfig>
      break;
 800335e:	e002      	b.n	8003366 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
      break;
 8003364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003392:	2302      	movs	r3, #2
 8003394:	e0ae      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	f200 809f 	bhi.w	80034e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033a6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080034e5 	.word	0x080034e5
 80033b4:	080034e5 	.word	0x080034e5
 80033b8:	080034e5 	.word	0x080034e5
 80033bc:	08003421 	.word	0x08003421
 80033c0:	080034e5 	.word	0x080034e5
 80033c4:	080034e5 	.word	0x080034e5
 80033c8:	080034e5 	.word	0x080034e5
 80033cc:	08003463 	.word	0x08003463
 80033d0:	080034e5 	.word	0x080034e5
 80033d4:	080034e5 	.word	0x080034e5
 80033d8:	080034e5 	.word	0x080034e5
 80033dc:	080034a3 	.word	0x080034a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f934 	bl	8003654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	619a      	str	r2, [r3, #24]
      break;
 800341e:	e064      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f984 	bl	8003734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800343a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800344a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6999      	ldr	r1, [r3, #24]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	021a      	lsls	r2, r3, #8
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	619a      	str	r2, [r3, #24]
      break;
 8003460:	e043      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f9d9 	bl	8003820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0208 	orr.w	r2, r2, #8
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0204 	bic.w	r2, r2, #4
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	61da      	str	r2, [r3, #28]
      break;
 80034a0:	e023      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fa2d 	bl	8003908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69d9      	ldr	r1, [r3, #28]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	61da      	str	r2, [r3, #28]
      break;
 80034e2:	e002      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
      break;
 80034e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a46      	ldr	r2, [pc, #280]	@ (8003628 <TIM_Base_SetConfig+0x12c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a43      	ldr	r2, [pc, #268]	@ (800362c <TIM_Base_SetConfig+0x130>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a42      	ldr	r2, [pc, #264]	@ (8003630 <TIM_Base_SetConfig+0x134>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a41      	ldr	r2, [pc, #260]	@ (8003634 <TIM_Base_SetConfig+0x138>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a40      	ldr	r2, [pc, #256]	@ (8003638 <TIM_Base_SetConfig+0x13c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a35      	ldr	r2, [pc, #212]	@ (8003628 <TIM_Base_SetConfig+0x12c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355c:	d027      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a32      	ldr	r2, [pc, #200]	@ (800362c <TIM_Base_SetConfig+0x130>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d023      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a31      	ldr	r2, [pc, #196]	@ (8003630 <TIM_Base_SetConfig+0x134>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a30      	ldr	r2, [pc, #192]	@ (8003634 <TIM_Base_SetConfig+0x138>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2f      	ldr	r2, [pc, #188]	@ (8003638 <TIM_Base_SetConfig+0x13c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d017      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2e      	ldr	r2, [pc, #184]	@ (800363c <TIM_Base_SetConfig+0x140>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <TIM_Base_SetConfig+0x144>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <TIM_Base_SetConfig+0x148>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <TIM_Base_SetConfig+0x14c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	@ (800364c <TIM_Base_SetConfig+0x150>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a29      	ldr	r2, [pc, #164]	@ (8003650 <TIM_Base_SetConfig+0x154>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a10      	ldr	r2, [pc, #64]	@ (8003628 <TIM_Base_SetConfig+0x12c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0xf8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <TIM_Base_SetConfig+0x13c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d103      	bne.n	80035fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d105      	bne.n	800361a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]
  }
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	40001800 	.word	0x40001800
 800364c:	40001c00 	.word	0x40001c00
 8003650:	40002000 	.word	0x40002000

08003654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 0201 	bic.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 0302 	bic.w	r3, r3, #2
 800369c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a20      	ldr	r2, [pc, #128]	@ (800372c <TIM_OC1_SetConfig+0xd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_OC1_SetConfig+0x64>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <TIM_OC1_SetConfig+0xdc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10c      	bne.n	80036d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0308 	bic.w	r3, r3, #8
 80036be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a15      	ldr	r2, [pc, #84]	@ (800372c <TIM_OC1_SetConfig+0xd8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_OC1_SetConfig+0x8e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a14      	ldr	r2, [pc, #80]	@ (8003730 <TIM_OC1_SetConfig+0xdc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d111      	bne.n	8003706 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	621a      	str	r2, [r3, #32]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40010000 	.word	0x40010000
 8003730:	40010400 	.word	0x40010400

08003734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f023 0210 	bic.w	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800376a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 0320 	bic.w	r3, r3, #32
 800377e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a22      	ldr	r2, [pc, #136]	@ (8003818 <TIM_OC2_SetConfig+0xe4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_OC2_SetConfig+0x68>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a21      	ldr	r2, [pc, #132]	@ (800381c <TIM_OC2_SetConfig+0xe8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d10d      	bne.n	80037b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <TIM_OC2_SetConfig+0xe4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_OC2_SetConfig+0x94>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a16      	ldr	r2, [pc, #88]	@ (800381c <TIM_OC2_SetConfig+0xe8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d113      	bne.n	80037f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40010400 	.word	0x40010400

08003820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a21      	ldr	r2, [pc, #132]	@ (8003900 <TIM_OC3_SetConfig+0xe0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_OC3_SetConfig+0x66>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a20      	ldr	r2, [pc, #128]	@ (8003904 <TIM_OC3_SetConfig+0xe4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10d      	bne.n	80038a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800388c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a16      	ldr	r2, [pc, #88]	@ (8003900 <TIM_OC3_SetConfig+0xe0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_OC3_SetConfig+0x92>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a15      	ldr	r2, [pc, #84]	@ (8003904 <TIM_OC3_SetConfig+0xe4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d113      	bne.n	80038da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40010000 	.word	0x40010000
 8003904:	40010400 	.word	0x40010400

08003908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a12      	ldr	r2, [pc, #72]	@ (80039ac <TIM_OC4_SetConfig+0xa4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC4_SetConfig+0x68>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <TIM_OC4_SetConfig+0xa8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d109      	bne.n	8003984 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40010400 	.word	0x40010400

080039b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2201      	movs	r2, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e05a      	b.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a64:	d01d      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a18      	ldr	r2, [pc, #96]	@ (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10c      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40010400 	.word	0x40010400
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40001800 	.word	0x40001800

08003af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e03d      	b.n	8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <memset>:
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4d0d      	ldr	r5, [pc, #52]	@ (8003be4 <__libc_init_array+0x38>)
 8003bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8003be8 <__libc_init_array+0x3c>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8003bec <__libc_init_array+0x40>)
 8003bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf0 <__libc_init_array+0x44>)
 8003bc0:	f001 f89e 	bl	8004d00 <_init>
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	2600      	movs	r6, #0
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08004f08 	.word	0x08004f08
 8003be8:	08004f08 	.word	0x08004f08
 8003bec:	08004f08 	.word	0x08004f08
 8003bf0:	08004f0c 	.word	0x08004f0c
 8003bf4:	00000000 	.word	0x00000000

08003bf8 <cos>:
 8003bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bfa:	ec53 2b10 	vmov	r2, r3, d0
 8003bfe:	4826      	ldr	r0, [pc, #152]	@ (8003c98 <cos+0xa0>)
 8003c00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c04:	4281      	cmp	r1, r0
 8003c06:	d806      	bhi.n	8003c16 <cos+0x1e>
 8003c08:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003c90 <cos+0x98>
 8003c0c:	b005      	add	sp, #20
 8003c0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c12:	f000 b899 	b.w	8003d48 <__kernel_cos>
 8003c16:	4821      	ldr	r0, [pc, #132]	@ (8003c9c <cos+0xa4>)
 8003c18:	4281      	cmp	r1, r0
 8003c1a:	d908      	bls.n	8003c2e <cos+0x36>
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f7fc faf6 	bl	8000210 <__aeabi_dsub>
 8003c24:	ec41 0b10 	vmov	d0, r0, r1
 8003c28:	b005      	add	sp, #20
 8003c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c2e:	4668      	mov	r0, sp
 8003c30:	f000 fa0e 	bl	8004050 <__ieee754_rem_pio2>
 8003c34:	f000 0003 	and.w	r0, r0, #3
 8003c38:	2801      	cmp	r0, #1
 8003c3a:	d00b      	beq.n	8003c54 <cos+0x5c>
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d015      	beq.n	8003c6c <cos+0x74>
 8003c40:	b9d8      	cbnz	r0, 8003c7a <cos+0x82>
 8003c42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c46:	ed9d 0b00 	vldr	d0, [sp]
 8003c4a:	f000 f87d 	bl	8003d48 <__kernel_cos>
 8003c4e:	ec51 0b10 	vmov	r0, r1, d0
 8003c52:	e7e7      	b.n	8003c24 <cos+0x2c>
 8003c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c58:	ed9d 0b00 	vldr	d0, [sp]
 8003c5c:	f000 f93c 	bl	8003ed8 <__kernel_sin>
 8003c60:	ec53 2b10 	vmov	r2, r3, d0
 8003c64:	4610      	mov	r0, r2
 8003c66:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003c6a:	e7db      	b.n	8003c24 <cos+0x2c>
 8003c6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c70:	ed9d 0b00 	vldr	d0, [sp]
 8003c74:	f000 f868 	bl	8003d48 <__kernel_cos>
 8003c78:	e7f2      	b.n	8003c60 <cos+0x68>
 8003c7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c7e:	ed9d 0b00 	vldr	d0, [sp]
 8003c82:	2001      	movs	r0, #1
 8003c84:	f000 f928 	bl	8003ed8 <__kernel_sin>
 8003c88:	e7e1      	b.n	8003c4e <cos+0x56>
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w
	...
 8003c98:	3fe921fb 	.word	0x3fe921fb
 8003c9c:	7fefffff 	.word	0x7fefffff

08003ca0 <sin>:
 8003ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ca2:	ec53 2b10 	vmov	r2, r3, d0
 8003ca6:	4826      	ldr	r0, [pc, #152]	@ (8003d40 <sin+0xa0>)
 8003ca8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cac:	4281      	cmp	r1, r0
 8003cae:	d807      	bhi.n	8003cc0 <sin+0x20>
 8003cb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003d38 <sin+0x98>
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	b005      	add	sp, #20
 8003cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cbc:	f000 b90c 	b.w	8003ed8 <__kernel_sin>
 8003cc0:	4820      	ldr	r0, [pc, #128]	@ (8003d44 <sin+0xa4>)
 8003cc2:	4281      	cmp	r1, r0
 8003cc4:	d908      	bls.n	8003cd8 <sin+0x38>
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f7fc faa1 	bl	8000210 <__aeabi_dsub>
 8003cce:	ec41 0b10 	vmov	d0, r0, r1
 8003cd2:	b005      	add	sp, #20
 8003cd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cd8:	4668      	mov	r0, sp
 8003cda:	f000 f9b9 	bl	8004050 <__ieee754_rem_pio2>
 8003cde:	f000 0003 	and.w	r0, r0, #3
 8003ce2:	2801      	cmp	r0, #1
 8003ce4:	d00c      	beq.n	8003d00 <sin+0x60>
 8003ce6:	2802      	cmp	r0, #2
 8003ce8:	d011      	beq.n	8003d0e <sin+0x6e>
 8003cea:	b9e8      	cbnz	r0, 8003d28 <sin+0x88>
 8003cec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cf0:	ed9d 0b00 	vldr	d0, [sp]
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f000 f8ef 	bl	8003ed8 <__kernel_sin>
 8003cfa:	ec51 0b10 	vmov	r0, r1, d0
 8003cfe:	e7e6      	b.n	8003cce <sin+0x2e>
 8003d00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d04:	ed9d 0b00 	vldr	d0, [sp]
 8003d08:	f000 f81e 	bl	8003d48 <__kernel_cos>
 8003d0c:	e7f5      	b.n	8003cfa <sin+0x5a>
 8003d0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d12:	ed9d 0b00 	vldr	d0, [sp]
 8003d16:	2001      	movs	r0, #1
 8003d18:	f000 f8de 	bl	8003ed8 <__kernel_sin>
 8003d1c:	ec53 2b10 	vmov	r2, r3, d0
 8003d20:	4610      	mov	r0, r2
 8003d22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003d26:	e7d2      	b.n	8003cce <sin+0x2e>
 8003d28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d2c:	ed9d 0b00 	vldr	d0, [sp]
 8003d30:	f000 f80a 	bl	8003d48 <__kernel_cos>
 8003d34:	e7f2      	b.n	8003d1c <sin+0x7c>
 8003d36:	bf00      	nop
	...
 8003d40:	3fe921fb 	.word	0x3fe921fb
 8003d44:	7fefffff 	.word	0x7fefffff

08003d48 <__kernel_cos>:
 8003d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	ec57 6b10 	vmov	r6, r7, d0
 8003d50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003d54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003d58:	ed8d 1b00 	vstr	d1, [sp]
 8003d5c:	d206      	bcs.n	8003d6c <__kernel_cos+0x24>
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4639      	mov	r1, r7
 8003d62:	f7fc fea7 	bl	8000ab4 <__aeabi_d2iz>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	f000 8088 	beq.w	8003e7c <__kernel_cos+0x134>
 8003d6c:	4632      	mov	r2, r6
 8003d6e:	463b      	mov	r3, r7
 8003d70:	4630      	mov	r0, r6
 8003d72:	4639      	mov	r1, r7
 8003d74:	f7fc fc04 	bl	8000580 <__aeabi_dmul>
 8003d78:	4b51      	ldr	r3, [pc, #324]	@ (8003ec0 <__kernel_cos+0x178>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	460d      	mov	r5, r1
 8003d80:	f7fc fbfe 	bl	8000580 <__aeabi_dmul>
 8003d84:	a340      	add	r3, pc, #256	@ (adr r3, 8003e88 <__kernel_cos+0x140>)
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	4682      	mov	sl, r0
 8003d8c:	468b      	mov	fp, r1
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7fc fbf5 	bl	8000580 <__aeabi_dmul>
 8003d96:	a33e      	add	r3, pc, #248	@ (adr r3, 8003e90 <__kernel_cos+0x148>)
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f7fc fa3a 	bl	8000214 <__adddf3>
 8003da0:	4622      	mov	r2, r4
 8003da2:	462b      	mov	r3, r5
 8003da4:	f7fc fbec 	bl	8000580 <__aeabi_dmul>
 8003da8:	a33b      	add	r3, pc, #236	@ (adr r3, 8003e98 <__kernel_cos+0x150>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fa2f 	bl	8000210 <__aeabi_dsub>
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	f7fc fbe3 	bl	8000580 <__aeabi_dmul>
 8003dba:	a339      	add	r3, pc, #228	@ (adr r3, 8003ea0 <__kernel_cos+0x158>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fa28 	bl	8000214 <__adddf3>
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	f7fc fbda 	bl	8000580 <__aeabi_dmul>
 8003dcc:	a336      	add	r3, pc, #216	@ (adr r3, 8003ea8 <__kernel_cos+0x160>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fa1d 	bl	8000210 <__aeabi_dsub>
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	f7fc fbd1 	bl	8000580 <__aeabi_dmul>
 8003dde:	a334      	add	r3, pc, #208	@ (adr r3, 8003eb0 <__kernel_cos+0x168>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fa16 	bl	8000214 <__adddf3>
 8003de8:	4622      	mov	r2, r4
 8003dea:	462b      	mov	r3, r5
 8003dec:	f7fc fbc8 	bl	8000580 <__aeabi_dmul>
 8003df0:	4622      	mov	r2, r4
 8003df2:	462b      	mov	r3, r5
 8003df4:	f7fc fbc4 	bl	8000580 <__aeabi_dmul>
 8003df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	4630      	mov	r0, r6
 8003e02:	4639      	mov	r1, r7
 8003e04:	f7fc fbbc 	bl	8000580 <__aeabi_dmul>
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7fc f9fe 	bl	8000210 <__aeabi_dsub>
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <__kernel_cos+0x17c>)
 8003e16:	4598      	cmp	r8, r3
 8003e18:	4606      	mov	r6, r0
 8003e1a:	460f      	mov	r7, r1
 8003e1c:	d810      	bhi.n	8003e40 <__kernel_cos+0xf8>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4650      	mov	r0, sl
 8003e24:	4659      	mov	r1, fp
 8003e26:	f7fc f9f3 	bl	8000210 <__aeabi_dsub>
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4926      	ldr	r1, [pc, #152]	@ (8003ec8 <__kernel_cos+0x180>)
 8003e2e:	4602      	mov	r2, r0
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fc f9ed 	bl	8000210 <__aeabi_dsub>
 8003e36:	ec41 0b10 	vmov	d0, r0, r1
 8003e3a:	b003      	add	sp, #12
 8003e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e40:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <__kernel_cos+0x184>)
 8003e42:	4921      	ldr	r1, [pc, #132]	@ (8003ec8 <__kernel_cos+0x180>)
 8003e44:	4598      	cmp	r8, r3
 8003e46:	bf8c      	ite	hi
 8003e48:	4d21      	ldrhi	r5, [pc, #132]	@ (8003ed0 <__kernel_cos+0x188>)
 8003e4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003e4e:	2400      	movs	r4, #0
 8003e50:	4622      	mov	r2, r4
 8003e52:	462b      	mov	r3, r5
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7fc f9db 	bl	8000210 <__aeabi_dsub>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	4680      	mov	r8, r0
 8003e5e:	4689      	mov	r9, r1
 8003e60:	462b      	mov	r3, r5
 8003e62:	4650      	mov	r0, sl
 8003e64:	4659      	mov	r1, fp
 8003e66:	f7fc f9d3 	bl	8000210 <__aeabi_dsub>
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	f7fc f9cf 	bl	8000210 <__aeabi_dsub>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4640      	mov	r0, r8
 8003e78:	4649      	mov	r1, r9
 8003e7a:	e7da      	b.n	8003e32 <__kernel_cos+0xea>
 8003e7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003eb8 <__kernel_cos+0x170>
 8003e80:	e7db      	b.n	8003e3a <__kernel_cos+0xf2>
 8003e82:	bf00      	nop
 8003e84:	f3af 8000 	nop.w
 8003e88:	be8838d4 	.word	0xbe8838d4
 8003e8c:	bda8fae9 	.word	0xbda8fae9
 8003e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8003e94:	3e21ee9e 	.word	0x3e21ee9e
 8003e98:	809c52ad 	.word	0x809c52ad
 8003e9c:	3e927e4f 	.word	0x3e927e4f
 8003ea0:	19cb1590 	.word	0x19cb1590
 8003ea4:	3efa01a0 	.word	0x3efa01a0
 8003ea8:	16c15177 	.word	0x16c15177
 8003eac:	3f56c16c 	.word	0x3f56c16c
 8003eb0:	5555554c 	.word	0x5555554c
 8003eb4:	3fa55555 	.word	0x3fa55555
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	3ff00000 	.word	0x3ff00000
 8003ec0:	3fe00000 	.word	0x3fe00000
 8003ec4:	3fd33332 	.word	0x3fd33332
 8003ec8:	3ff00000 	.word	0x3ff00000
 8003ecc:	3fe90000 	.word	0x3fe90000
 8003ed0:	3fd20000 	.word	0x3fd20000
 8003ed4:	00000000 	.word	0x00000000

08003ed8 <__kernel_sin>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	ec55 4b10 	vmov	r4, r5, d0
 8003ee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003eea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003eee:	4680      	mov	r8, r0
 8003ef0:	d205      	bcs.n	8003efe <__kernel_sin+0x26>
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f7fc fddd 	bl	8000ab4 <__aeabi_d2iz>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d052      	beq.n	8003fa4 <__kernel_sin+0xcc>
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc fb3b 	bl	8000580 <__aeabi_dmul>
 8003f0a:	4682      	mov	sl, r0
 8003f0c:	468b      	mov	fp, r1
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc fb33 	bl	8000580 <__aeabi_dmul>
 8003f1a:	a342      	add	r3, pc, #264	@ (adr r3, 8004024 <__kernel_sin+0x14c>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	e9cd 0100 	strd	r0, r1, [sp]
 8003f24:	4650      	mov	r0, sl
 8003f26:	4659      	mov	r1, fp
 8003f28:	f7fc fb2a 	bl	8000580 <__aeabi_dmul>
 8003f2c:	a33f      	add	r3, pc, #252	@ (adr r3, 800402c <__kernel_sin+0x154>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc f96d 	bl	8000210 <__aeabi_dsub>
 8003f36:	4652      	mov	r2, sl
 8003f38:	465b      	mov	r3, fp
 8003f3a:	f7fc fb21 	bl	8000580 <__aeabi_dmul>
 8003f3e:	a33d      	add	r3, pc, #244	@ (adr r3, 8004034 <__kernel_sin+0x15c>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f7fc f966 	bl	8000214 <__adddf3>
 8003f48:	4652      	mov	r2, sl
 8003f4a:	465b      	mov	r3, fp
 8003f4c:	f7fc fb18 	bl	8000580 <__aeabi_dmul>
 8003f50:	a33a      	add	r3, pc, #232	@ (adr r3, 800403c <__kernel_sin+0x164>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc f95b 	bl	8000210 <__aeabi_dsub>
 8003f5a:	4652      	mov	r2, sl
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	f7fc fb0f 	bl	8000580 <__aeabi_dmul>
 8003f62:	a338      	add	r3, pc, #224	@ (adr r3, 8004044 <__kernel_sin+0x16c>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc f954 	bl	8000214 <__adddf3>
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460f      	mov	r7, r1
 8003f70:	f1b8 0f00 	cmp.w	r8, #0
 8003f74:	d11b      	bne.n	8003fae <__kernel_sin+0xd6>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4650      	mov	r0, sl
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	f7fc faff 	bl	8000580 <__aeabi_dmul>
 8003f82:	a325      	add	r3, pc, #148	@ (adr r3, 8004018 <__kernel_sin+0x140>)
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f7fc f942 	bl	8000210 <__aeabi_dsub>
 8003f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f90:	f7fc faf6 	bl	8000580 <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4620      	mov	r0, r4
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	f7fc f93a 	bl	8000214 <__adddf3>
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	460d      	mov	r5, r1
 8003fa4:	ec45 4b10 	vmov	d0, r4, r5
 8003fa8:	b005      	add	sp, #20
 8003faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <__kernel_sin+0x148>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f7fc fae3 	bl	8000580 <__aeabi_dmul>
 8003fba:	4632      	mov	r2, r6
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4689      	mov	r9, r1
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fc6:	f7fc fadb 	bl	8000580 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc f91d 	bl	8000210 <__aeabi_dsub>
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	465b      	mov	r3, fp
 8003fda:	f7fc fad1 	bl	8000580 <__aeabi_dmul>
 8003fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe2:	f7fc f915 	bl	8000210 <__aeabi_dsub>
 8003fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8004018 <__kernel_sin+0x140>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	4606      	mov	r6, r0
 8003fee:	460f      	mov	r7, r1
 8003ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ff4:	f7fc fac4 	bl	8000580 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	4639      	mov	r1, r7
 8004000:	f7fc f908 	bl	8000214 <__adddf3>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4620      	mov	r0, r4
 800400a:	4629      	mov	r1, r5
 800400c:	f7fc f900 	bl	8000210 <__aeabi_dsub>
 8004010:	e7c6      	b.n	8003fa0 <__kernel_sin+0xc8>
 8004012:	bf00      	nop
 8004014:	f3af 8000 	nop.w
 8004018:	55555549 	.word	0x55555549
 800401c:	3fc55555 	.word	0x3fc55555
 8004020:	3fe00000 	.word	0x3fe00000
 8004024:	5acfd57c 	.word	0x5acfd57c
 8004028:	3de5d93a 	.word	0x3de5d93a
 800402c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004030:	3e5ae5e6 	.word	0x3e5ae5e6
 8004034:	57b1fe7d 	.word	0x57b1fe7d
 8004038:	3ec71de3 	.word	0x3ec71de3
 800403c:	19c161d5 	.word	0x19c161d5
 8004040:	3f2a01a0 	.word	0x3f2a01a0
 8004044:	1110f8a6 	.word	0x1110f8a6
 8004048:	3f811111 	.word	0x3f811111
 800404c:	00000000 	.word	0x00000000

08004050 <__ieee754_rem_pio2>:
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	ec57 6b10 	vmov	r6, r7, d0
 8004058:	4bc5      	ldr	r3, [pc, #788]	@ (8004370 <__ieee754_rem_pio2+0x320>)
 800405a:	b08d      	sub	sp, #52	@ 0x34
 800405c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004060:	4598      	cmp	r8, r3
 8004062:	4604      	mov	r4, r0
 8004064:	9704      	str	r7, [sp, #16]
 8004066:	d807      	bhi.n	8004078 <__ieee754_rem_pio2+0x28>
 8004068:	2200      	movs	r2, #0
 800406a:	2300      	movs	r3, #0
 800406c:	ed80 0b00 	vstr	d0, [r0]
 8004070:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004074:	2500      	movs	r5, #0
 8004076:	e028      	b.n	80040ca <__ieee754_rem_pio2+0x7a>
 8004078:	4bbe      	ldr	r3, [pc, #760]	@ (8004374 <__ieee754_rem_pio2+0x324>)
 800407a:	4598      	cmp	r8, r3
 800407c:	d878      	bhi.n	8004170 <__ieee754_rem_pio2+0x120>
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	4dbd      	ldr	r5, [pc, #756]	@ (8004378 <__ieee754_rem_pio2+0x328>)
 8004082:	2b00      	cmp	r3, #0
 8004084:	4630      	mov	r0, r6
 8004086:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004338 <__ieee754_rem_pio2+0x2e8>)
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	4639      	mov	r1, r7
 800408e:	dd38      	ble.n	8004102 <__ieee754_rem_pio2+0xb2>
 8004090:	f7fc f8be 	bl	8000210 <__aeabi_dsub>
 8004094:	45a8      	cmp	r8, r5
 8004096:	4606      	mov	r6, r0
 8004098:	460f      	mov	r7, r1
 800409a:	d01a      	beq.n	80040d2 <__ieee754_rem_pio2+0x82>
 800409c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004340 <__ieee754_rem_pio2+0x2f0>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f7fc f8b5 	bl	8000210 <__aeabi_dsub>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4680      	mov	r8, r0
 80040ac:	4689      	mov	r9, r1
 80040ae:	4630      	mov	r0, r6
 80040b0:	4639      	mov	r1, r7
 80040b2:	f7fc f8ad 	bl	8000210 <__aeabi_dsub>
 80040b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004340 <__ieee754_rem_pio2+0x2f0>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc f8a8 	bl	8000210 <__aeabi_dsub>
 80040c0:	e9c4 8900 	strd	r8, r9, [r4]
 80040c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80040c8:	2501      	movs	r5, #1
 80040ca:	4628      	mov	r0, r5
 80040cc:	b00d      	add	sp, #52	@ 0x34
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d2:	a39d      	add	r3, pc, #628	@ (adr r3, 8004348 <__ieee754_rem_pio2+0x2f8>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f89a 	bl	8000210 <__aeabi_dsub>
 80040dc:	a39c      	add	r3, pc, #624	@ (adr r3, 8004350 <__ieee754_rem_pio2+0x300>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	4606      	mov	r6, r0
 80040e4:	460f      	mov	r7, r1
 80040e6:	f7fc f893 	bl	8000210 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4680      	mov	r8, r0
 80040f0:	4689      	mov	r9, r1
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc f88b 	bl	8000210 <__aeabi_dsub>
 80040fa:	a395      	add	r3, pc, #596	@ (adr r3, 8004350 <__ieee754_rem_pio2+0x300>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	e7dc      	b.n	80040bc <__ieee754_rem_pio2+0x6c>
 8004102:	f7fc f887 	bl	8000214 <__adddf3>
 8004106:	45a8      	cmp	r8, r5
 8004108:	4606      	mov	r6, r0
 800410a:	460f      	mov	r7, r1
 800410c:	d018      	beq.n	8004140 <__ieee754_rem_pio2+0xf0>
 800410e:	a38c      	add	r3, pc, #560	@ (adr r3, 8004340 <__ieee754_rem_pio2+0x2f0>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f7fc f87e 	bl	8000214 <__adddf3>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4680      	mov	r8, r0
 800411e:	4689      	mov	r9, r1
 8004120:	4630      	mov	r0, r6
 8004122:	4639      	mov	r1, r7
 8004124:	f7fc f874 	bl	8000210 <__aeabi_dsub>
 8004128:	a385      	add	r3, pc, #532	@ (adr r3, 8004340 <__ieee754_rem_pio2+0x2f0>)
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f7fc f871 	bl	8000214 <__adddf3>
 8004132:	f04f 35ff 	mov.w	r5, #4294967295
 8004136:	e9c4 8900 	strd	r8, r9, [r4]
 800413a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800413e:	e7c4      	b.n	80040ca <__ieee754_rem_pio2+0x7a>
 8004140:	a381      	add	r3, pc, #516	@ (adr r3, 8004348 <__ieee754_rem_pio2+0x2f8>)
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f7fc f865 	bl	8000214 <__adddf3>
 800414a:	a381      	add	r3, pc, #516	@ (adr r3, 8004350 <__ieee754_rem_pio2+0x300>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	4606      	mov	r6, r0
 8004152:	460f      	mov	r7, r1
 8004154:	f7fc f85e 	bl	8000214 <__adddf3>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4680      	mov	r8, r0
 800415e:	4689      	mov	r9, r1
 8004160:	4630      	mov	r0, r6
 8004162:	4639      	mov	r1, r7
 8004164:	f7fc f854 	bl	8000210 <__aeabi_dsub>
 8004168:	a379      	add	r3, pc, #484	@ (adr r3, 8004350 <__ieee754_rem_pio2+0x300>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	e7de      	b.n	800412e <__ieee754_rem_pio2+0xde>
 8004170:	4b82      	ldr	r3, [pc, #520]	@ (800437c <__ieee754_rem_pio2+0x32c>)
 8004172:	4598      	cmp	r8, r3
 8004174:	f200 80d1 	bhi.w	800431a <__ieee754_rem_pio2+0x2ca>
 8004178:	f000 f966 	bl	8004448 <fabs>
 800417c:	ec57 6b10 	vmov	r6, r7, d0
 8004180:	a375      	add	r3, pc, #468	@ (adr r3, 8004358 <__ieee754_rem_pio2+0x308>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	4630      	mov	r0, r6
 8004188:	4639      	mov	r1, r7
 800418a:	f7fc f9f9 	bl	8000580 <__aeabi_dmul>
 800418e:	4b7c      	ldr	r3, [pc, #496]	@ (8004380 <__ieee754_rem_pio2+0x330>)
 8004190:	2200      	movs	r2, #0
 8004192:	f7fc f83f 	bl	8000214 <__adddf3>
 8004196:	f7fc fc8d 	bl	8000ab4 <__aeabi_d2iz>
 800419a:	4605      	mov	r5, r0
 800419c:	f7fc f986 	bl	80004ac <__aeabi_i2d>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041a8:	a363      	add	r3, pc, #396	@ (adr r3, 8004338 <__ieee754_rem_pio2+0x2e8>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc f9e7 	bl	8000580 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4630      	mov	r0, r6
 80041b8:	4639      	mov	r1, r7
 80041ba:	f7fc f829 	bl	8000210 <__aeabi_dsub>
 80041be:	a360      	add	r3, pc, #384	@ (adr r3, 8004340 <__ieee754_rem_pio2+0x2f0>)
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	4682      	mov	sl, r0
 80041c6:	468b      	mov	fp, r1
 80041c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041cc:	f7fc f9d8 	bl	8000580 <__aeabi_dmul>
 80041d0:	2d1f      	cmp	r5, #31
 80041d2:	4606      	mov	r6, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	dc0c      	bgt.n	80041f2 <__ieee754_rem_pio2+0x1a2>
 80041d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004384 <__ieee754_rem_pio2+0x334>)
 80041da:	1e6a      	subs	r2, r5, #1
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	4543      	cmp	r3, r8
 80041e2:	d006      	beq.n	80041f2 <__ieee754_rem_pio2+0x1a2>
 80041e4:	4632      	mov	r2, r6
 80041e6:	463b      	mov	r3, r7
 80041e8:	4650      	mov	r0, sl
 80041ea:	4659      	mov	r1, fp
 80041ec:	f7fc f810 	bl	8000210 <__aeabi_dsub>
 80041f0:	e00e      	b.n	8004210 <__ieee754_rem_pio2+0x1c0>
 80041f2:	463b      	mov	r3, r7
 80041f4:	4632      	mov	r2, r6
 80041f6:	4650      	mov	r0, sl
 80041f8:	4659      	mov	r1, fp
 80041fa:	f7fc f809 	bl	8000210 <__aeabi_dsub>
 80041fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004208:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800420c:	2b10      	cmp	r3, #16
 800420e:	dc02      	bgt.n	8004216 <__ieee754_rem_pio2+0x1c6>
 8004210:	e9c4 0100 	strd	r0, r1, [r4]
 8004214:	e039      	b.n	800428a <__ieee754_rem_pio2+0x23a>
 8004216:	a34c      	add	r3, pc, #304	@ (adr r3, 8004348 <__ieee754_rem_pio2+0x2f8>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004220:	f7fc f9ae 	bl	8000580 <__aeabi_dmul>
 8004224:	4606      	mov	r6, r0
 8004226:	460f      	mov	r7, r1
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4650      	mov	r0, sl
 800422e:	4659      	mov	r1, fp
 8004230:	f7fb ffee 	bl	8000210 <__aeabi_dsub>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4680      	mov	r8, r0
 800423a:	4689      	mov	r9, r1
 800423c:	4650      	mov	r0, sl
 800423e:	4659      	mov	r1, fp
 8004240:	f7fb ffe6 	bl	8000210 <__aeabi_dsub>
 8004244:	4632      	mov	r2, r6
 8004246:	463b      	mov	r3, r7
 8004248:	f7fb ffe2 	bl	8000210 <__aeabi_dsub>
 800424c:	a340      	add	r3, pc, #256	@ (adr r3, 8004350 <__ieee754_rem_pio2+0x300>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	4606      	mov	r6, r0
 8004254:	460f      	mov	r7, r1
 8004256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800425a:	f7fc f991 	bl	8000580 <__aeabi_dmul>
 800425e:	4632      	mov	r2, r6
 8004260:	463b      	mov	r3, r7
 8004262:	f7fb ffd5 	bl	8000210 <__aeabi_dsub>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4606      	mov	r6, r0
 800426c:	460f      	mov	r7, r1
 800426e:	4640      	mov	r0, r8
 8004270:	4649      	mov	r1, r9
 8004272:	f7fb ffcd 	bl	8000210 <__aeabi_dsub>
 8004276:	9a05      	ldr	r2, [sp, #20]
 8004278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b31      	cmp	r3, #49	@ 0x31
 8004280:	dc20      	bgt.n	80042c4 <__ieee754_rem_pio2+0x274>
 8004282:	e9c4 0100 	strd	r0, r1, [r4]
 8004286:	46c2      	mov	sl, r8
 8004288:	46cb      	mov	fp, r9
 800428a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800428e:	4650      	mov	r0, sl
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	4659      	mov	r1, fp
 8004296:	f7fb ffbb 	bl	8000210 <__aeabi_dsub>
 800429a:	463b      	mov	r3, r7
 800429c:	4632      	mov	r2, r6
 800429e:	f7fb ffb7 	bl	8000210 <__aeabi_dsub>
 80042a2:	9b04      	ldr	r3, [sp, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80042aa:	f6bf af0e 	bge.w	80040ca <__ieee754_rem_pio2+0x7a>
 80042ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80042b2:	6063      	str	r3, [r4, #4]
 80042b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80042b8:	f8c4 8000 	str.w	r8, [r4]
 80042bc:	60a0      	str	r0, [r4, #8]
 80042be:	60e3      	str	r3, [r4, #12]
 80042c0:	426d      	negs	r5, r5
 80042c2:	e702      	b.n	80040ca <__ieee754_rem_pio2+0x7a>
 80042c4:	a326      	add	r3, pc, #152	@ (adr r3, 8004360 <__ieee754_rem_pio2+0x310>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ce:	f7fc f957 	bl	8000580 <__aeabi_dmul>
 80042d2:	4606      	mov	r6, r0
 80042d4:	460f      	mov	r7, r1
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4640      	mov	r0, r8
 80042dc:	4649      	mov	r1, r9
 80042de:	f7fb ff97 	bl	8000210 <__aeabi_dsub>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4682      	mov	sl, r0
 80042e8:	468b      	mov	fp, r1
 80042ea:	4640      	mov	r0, r8
 80042ec:	4649      	mov	r1, r9
 80042ee:	f7fb ff8f 	bl	8000210 <__aeabi_dsub>
 80042f2:	4632      	mov	r2, r6
 80042f4:	463b      	mov	r3, r7
 80042f6:	f7fb ff8b 	bl	8000210 <__aeabi_dsub>
 80042fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8004368 <__ieee754_rem_pio2+0x318>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	4606      	mov	r6, r0
 8004302:	460f      	mov	r7, r1
 8004304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004308:	f7fc f93a 	bl	8000580 <__aeabi_dmul>
 800430c:	4632      	mov	r2, r6
 800430e:	463b      	mov	r3, r7
 8004310:	f7fb ff7e 	bl	8000210 <__aeabi_dsub>
 8004314:	4606      	mov	r6, r0
 8004316:	460f      	mov	r7, r1
 8004318:	e764      	b.n	80041e4 <__ieee754_rem_pio2+0x194>
 800431a:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <__ieee754_rem_pio2+0x338>)
 800431c:	4598      	cmp	r8, r3
 800431e:	d935      	bls.n	800438c <__ieee754_rem_pio2+0x33c>
 8004320:	4632      	mov	r2, r6
 8004322:	463b      	mov	r3, r7
 8004324:	4630      	mov	r0, r6
 8004326:	4639      	mov	r1, r7
 8004328:	f7fb ff72 	bl	8000210 <__aeabi_dsub>
 800432c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004330:	e9c4 0100 	strd	r0, r1, [r4]
 8004334:	e69e      	b.n	8004074 <__ieee754_rem_pio2+0x24>
 8004336:	bf00      	nop
 8004338:	54400000 	.word	0x54400000
 800433c:	3ff921fb 	.word	0x3ff921fb
 8004340:	1a626331 	.word	0x1a626331
 8004344:	3dd0b461 	.word	0x3dd0b461
 8004348:	1a600000 	.word	0x1a600000
 800434c:	3dd0b461 	.word	0x3dd0b461
 8004350:	2e037073 	.word	0x2e037073
 8004354:	3ba3198a 	.word	0x3ba3198a
 8004358:	6dc9c883 	.word	0x6dc9c883
 800435c:	3fe45f30 	.word	0x3fe45f30
 8004360:	2e000000 	.word	0x2e000000
 8004364:	3ba3198a 	.word	0x3ba3198a
 8004368:	252049c1 	.word	0x252049c1
 800436c:	397b839a 	.word	0x397b839a
 8004370:	3fe921fb 	.word	0x3fe921fb
 8004374:	4002d97b 	.word	0x4002d97b
 8004378:	3ff921fb 	.word	0x3ff921fb
 800437c:	413921fb 	.word	0x413921fb
 8004380:	3fe00000 	.word	0x3fe00000
 8004384:	08004d28 	.word	0x08004d28
 8004388:	7fefffff 	.word	0x7fefffff
 800438c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004390:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004394:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004398:	4630      	mov	r0, r6
 800439a:	460f      	mov	r7, r1
 800439c:	f7fc fb8a 	bl	8000ab4 <__aeabi_d2iz>
 80043a0:	f7fc f884 	bl	80004ac <__aeabi_i2d>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4630      	mov	r0, r6
 80043aa:	4639      	mov	r1, r7
 80043ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043b0:	f7fb ff2e 	bl	8000210 <__aeabi_dsub>
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <__ieee754_rem_pio2+0x3f0>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	f7fc f8e2 	bl	8000580 <__aeabi_dmul>
 80043bc:	460f      	mov	r7, r1
 80043be:	4606      	mov	r6, r0
 80043c0:	f7fc fb78 	bl	8000ab4 <__aeabi_d2iz>
 80043c4:	f7fc f872 	bl	80004ac <__aeabi_i2d>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4630      	mov	r0, r6
 80043ce:	4639      	mov	r1, r7
 80043d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043d4:	f7fb ff1c 	bl	8000210 <__aeabi_dsub>
 80043d8:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <__ieee754_rem_pio2+0x3f0>)
 80043da:	2200      	movs	r2, #0
 80043dc:	f7fc f8d0 	bl	8000580 <__aeabi_dmul>
 80043e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80043e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80043e8:	f04f 0803 	mov.w	r8, #3
 80043ec:	2600      	movs	r6, #0
 80043ee:	2700      	movs	r7, #0
 80043f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80043f4:	4632      	mov	r2, r6
 80043f6:	463b      	mov	r3, r7
 80043f8:	46c2      	mov	sl, r8
 80043fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80043fe:	f7fc fb27 	bl	8000a50 <__aeabi_dcmpeq>
 8004402:	2800      	cmp	r0, #0
 8004404:	d1f4      	bne.n	80043f0 <__ieee754_rem_pio2+0x3a0>
 8004406:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <__ieee754_rem_pio2+0x3f4>)
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	2302      	movs	r3, #2
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	462a      	mov	r2, r5
 8004410:	4653      	mov	r3, sl
 8004412:	4621      	mov	r1, r4
 8004414:	a806      	add	r0, sp, #24
 8004416:	f000 f81f 	bl	8004458 <__kernel_rem_pio2>
 800441a:	9b04      	ldr	r3, [sp, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	4605      	mov	r5, r0
 8004420:	f6bf ae53 	bge.w	80040ca <__ieee754_rem_pio2+0x7a>
 8004424:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004428:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800442c:	e9c4 2300 	strd	r2, r3, [r4]
 8004430:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004434:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004438:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800443c:	e740      	b.n	80042c0 <__ieee754_rem_pio2+0x270>
 800443e:	bf00      	nop
 8004440:	41700000 	.word	0x41700000
 8004444:	08004da8 	.word	0x08004da8

08004448 <fabs>:
 8004448:	ec51 0b10 	vmov	r0, r1, d0
 800444c:	4602      	mov	r2, r0
 800444e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004452:	ec43 2b10 	vmov	d0, r2, r3
 8004456:	4770      	bx	lr

08004458 <__kernel_rem_pio2>:
 8004458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445c:	ed2d 8b02 	vpush	{d8}
 8004460:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004464:	f112 0f14 	cmn.w	r2, #20
 8004468:	9306      	str	r3, [sp, #24]
 800446a:	9104      	str	r1, [sp, #16]
 800446c:	4bbe      	ldr	r3, [pc, #760]	@ (8004768 <__kernel_rem_pio2+0x310>)
 800446e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004470:	9008      	str	r0, [sp, #32]
 8004472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	f103 33ff 	add.w	r3, r3, #4294967295
 800447e:	bfa8      	it	ge
 8004480:	1ed4      	subge	r4, r2, #3
 8004482:	9305      	str	r3, [sp, #20]
 8004484:	bfb2      	itee	lt
 8004486:	2400      	movlt	r4, #0
 8004488:	2318      	movge	r3, #24
 800448a:	fb94 f4f3 	sdivge	r4, r4, r3
 800448e:	f06f 0317 	mvn.w	r3, #23
 8004492:	fb04 3303 	mla	r3, r4, r3, r3
 8004496:	eb03 0b02 	add.w	fp, r3, r2
 800449a:	9b00      	ldr	r3, [sp, #0]
 800449c:	9a05      	ldr	r2, [sp, #20]
 800449e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004758 <__kernel_rem_pio2+0x300>
 80044a2:	eb03 0802 	add.w	r8, r3, r2
 80044a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80044a8:	1aa7      	subs	r7, r4, r2
 80044aa:	ae20      	add	r6, sp, #128	@ 0x80
 80044ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80044b0:	2500      	movs	r5, #0
 80044b2:	4545      	cmp	r5, r8
 80044b4:	dd13      	ble.n	80044de <__kernel_rem_pio2+0x86>
 80044b6:	9b06      	ldr	r3, [sp, #24]
 80044b8:	aa20      	add	r2, sp, #128	@ 0x80
 80044ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80044be:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	4598      	cmp	r8, r3
 80044ca:	dc31      	bgt.n	8004530 <__kernel_rem_pio2+0xd8>
 80044cc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004758 <__kernel_rem_pio2+0x300>
 80044d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80044d8:	462f      	mov	r7, r5
 80044da:	2600      	movs	r6, #0
 80044dc:	e01b      	b.n	8004516 <__kernel_rem_pio2+0xbe>
 80044de:	42ef      	cmn	r7, r5
 80044e0:	d407      	bmi.n	80044f2 <__kernel_rem_pio2+0x9a>
 80044e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80044e6:	f7fb ffe1 	bl	80004ac <__aeabi_i2d>
 80044ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80044ee:	3501      	adds	r5, #1
 80044f0:	e7df      	b.n	80044b2 <__kernel_rem_pio2+0x5a>
 80044f2:	ec51 0b18 	vmov	r0, r1, d8
 80044f6:	e7f8      	b.n	80044ea <__kernel_rem_pio2+0x92>
 80044f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004500:	f7fc f83e 	bl	8000580 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800450c:	f7fb fe82 	bl	8000214 <__adddf3>
 8004510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004514:	3601      	adds	r6, #1
 8004516:	9b05      	ldr	r3, [sp, #20]
 8004518:	429e      	cmp	r6, r3
 800451a:	f1a7 0708 	sub.w	r7, r7, #8
 800451e:	ddeb      	ble.n	80044f8 <__kernel_rem_pio2+0xa0>
 8004520:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004524:	f108 0801 	add.w	r8, r8, #1
 8004528:	ecaa 7b02 	vstmia	sl!, {d7}
 800452c:	3508      	adds	r5, #8
 800452e:	e7ca      	b.n	80044c6 <__kernel_rem_pio2+0x6e>
 8004530:	9b00      	ldr	r3, [sp, #0]
 8004532:	f8dd 8000 	ldr.w	r8, [sp]
 8004536:	aa0c      	add	r2, sp, #48	@ 0x30
 8004538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800453c:	930a      	str	r3, [sp, #40]	@ 0x28
 800453e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004540:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004544:	9309      	str	r3, [sp, #36]	@ 0x24
 8004546:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800454a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800454c:	ab98      	add	r3, sp, #608	@ 0x260
 800454e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004552:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004556:	ed8d 7b02 	vstr	d7, [sp, #8]
 800455a:	ac0c      	add	r4, sp, #48	@ 0x30
 800455c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800455e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004562:	46a1      	mov	r9, r4
 8004564:	46c2      	mov	sl, r8
 8004566:	f1ba 0f00 	cmp.w	sl, #0
 800456a:	f1a5 0508 	sub.w	r5, r5, #8
 800456e:	dc77      	bgt.n	8004660 <__kernel_rem_pio2+0x208>
 8004570:	4658      	mov	r0, fp
 8004572:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004576:	f000 fac7 	bl	8004b08 <scalbn>
 800457a:	ec57 6b10 	vmov	r6, r7, d0
 800457e:	2200      	movs	r2, #0
 8004580:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004584:	4630      	mov	r0, r6
 8004586:	4639      	mov	r1, r7
 8004588:	f7fb fffa 	bl	8000580 <__aeabi_dmul>
 800458c:	ec41 0b10 	vmov	d0, r0, r1
 8004590:	f000 fb3a 	bl	8004c08 <floor>
 8004594:	4b75      	ldr	r3, [pc, #468]	@ (800476c <__kernel_rem_pio2+0x314>)
 8004596:	ec51 0b10 	vmov	r0, r1, d0
 800459a:	2200      	movs	r2, #0
 800459c:	f7fb fff0 	bl	8000580 <__aeabi_dmul>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4630      	mov	r0, r6
 80045a6:	4639      	mov	r1, r7
 80045a8:	f7fb fe32 	bl	8000210 <__aeabi_dsub>
 80045ac:	460f      	mov	r7, r1
 80045ae:	4606      	mov	r6, r0
 80045b0:	f7fc fa80 	bl	8000ab4 <__aeabi_d2iz>
 80045b4:	9002      	str	r0, [sp, #8]
 80045b6:	f7fb ff79 	bl	80004ac <__aeabi_i2d>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	f7fb fe25 	bl	8000210 <__aeabi_dsub>
 80045c6:	f1bb 0f00 	cmp.w	fp, #0
 80045ca:	4606      	mov	r6, r0
 80045cc:	460f      	mov	r7, r1
 80045ce:	dd6c      	ble.n	80046aa <__kernel_rem_pio2+0x252>
 80045d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80045d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80045d6:	9d02      	ldr	r5, [sp, #8]
 80045d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80045dc:	f1cb 0018 	rsb	r0, fp, #24
 80045e0:	fa43 f200 	asr.w	r2, r3, r0
 80045e4:	4415      	add	r5, r2
 80045e6:	4082      	lsls	r2, r0
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80045ec:	9502      	str	r5, [sp, #8]
 80045ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80045f2:	f1cb 0217 	rsb	r2, fp, #23
 80045f6:	fa43 f902 	asr.w	r9, r3, r2
 80045fa:	f1b9 0f00 	cmp.w	r9, #0
 80045fe:	dd64      	ble.n	80046ca <__kernel_rem_pio2+0x272>
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	2200      	movs	r2, #0
 8004604:	3301      	adds	r3, #1
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	4615      	mov	r5, r2
 800460a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800460e:	4590      	cmp	r8, r2
 8004610:	f300 80b8 	bgt.w	8004784 <__kernel_rem_pio2+0x32c>
 8004614:	f1bb 0f00 	cmp.w	fp, #0
 8004618:	dd07      	ble.n	800462a <__kernel_rem_pio2+0x1d2>
 800461a:	f1bb 0f01 	cmp.w	fp, #1
 800461e:	f000 80bf 	beq.w	80047a0 <__kernel_rem_pio2+0x348>
 8004622:	f1bb 0f02 	cmp.w	fp, #2
 8004626:	f000 80c6 	beq.w	80047b6 <__kernel_rem_pio2+0x35e>
 800462a:	f1b9 0f02 	cmp.w	r9, #2
 800462e:	d14c      	bne.n	80046ca <__kernel_rem_pio2+0x272>
 8004630:	4632      	mov	r2, r6
 8004632:	463b      	mov	r3, r7
 8004634:	494e      	ldr	r1, [pc, #312]	@ (8004770 <__kernel_rem_pio2+0x318>)
 8004636:	2000      	movs	r0, #0
 8004638:	f7fb fdea 	bl	8000210 <__aeabi_dsub>
 800463c:	4606      	mov	r6, r0
 800463e:	460f      	mov	r7, r1
 8004640:	2d00      	cmp	r5, #0
 8004642:	d042      	beq.n	80046ca <__kernel_rem_pio2+0x272>
 8004644:	4658      	mov	r0, fp
 8004646:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004760 <__kernel_rem_pio2+0x308>
 800464a:	f000 fa5d 	bl	8004b08 <scalbn>
 800464e:	4630      	mov	r0, r6
 8004650:	4639      	mov	r1, r7
 8004652:	ec53 2b10 	vmov	r2, r3, d0
 8004656:	f7fb fddb 	bl	8000210 <__aeabi_dsub>
 800465a:	4606      	mov	r6, r0
 800465c:	460f      	mov	r7, r1
 800465e:	e034      	b.n	80046ca <__kernel_rem_pio2+0x272>
 8004660:	4b44      	ldr	r3, [pc, #272]	@ (8004774 <__kernel_rem_pio2+0x31c>)
 8004662:	2200      	movs	r2, #0
 8004664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004668:	f7fb ff8a 	bl	8000580 <__aeabi_dmul>
 800466c:	f7fc fa22 	bl	8000ab4 <__aeabi_d2iz>
 8004670:	f7fb ff1c 	bl	80004ac <__aeabi_i2d>
 8004674:	4b40      	ldr	r3, [pc, #256]	@ (8004778 <__kernel_rem_pio2+0x320>)
 8004676:	2200      	movs	r2, #0
 8004678:	4606      	mov	r6, r0
 800467a:	460f      	mov	r7, r1
 800467c:	f7fb ff80 	bl	8000580 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004688:	f7fb fdc2 	bl	8000210 <__aeabi_dsub>
 800468c:	f7fc fa12 	bl	8000ab4 <__aeabi_d2iz>
 8004690:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004694:	f849 0b04 	str.w	r0, [r9], #4
 8004698:	4639      	mov	r1, r7
 800469a:	4630      	mov	r0, r6
 800469c:	f7fb fdba 	bl	8000214 <__adddf3>
 80046a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046a8:	e75d      	b.n	8004566 <__kernel_rem_pio2+0x10e>
 80046aa:	d107      	bne.n	80046bc <__kernel_rem_pio2+0x264>
 80046ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80046b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80046b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80046ba:	e79e      	b.n	80045fa <__kernel_rem_pio2+0x1a2>
 80046bc:	4b2f      	ldr	r3, [pc, #188]	@ (800477c <__kernel_rem_pio2+0x324>)
 80046be:	2200      	movs	r2, #0
 80046c0:	f7fc f9e4 	bl	8000a8c <__aeabi_dcmpge>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d143      	bne.n	8004750 <__kernel_rem_pio2+0x2f8>
 80046c8:	4681      	mov	r9, r0
 80046ca:	2200      	movs	r2, #0
 80046cc:	2300      	movs	r3, #0
 80046ce:	4630      	mov	r0, r6
 80046d0:	4639      	mov	r1, r7
 80046d2:	f7fc f9bd 	bl	8000a50 <__aeabi_dcmpeq>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f000 80bf 	beq.w	800485a <__kernel_rem_pio2+0x402>
 80046dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80046e0:	2200      	movs	r2, #0
 80046e2:	9900      	ldr	r1, [sp, #0]
 80046e4:	428b      	cmp	r3, r1
 80046e6:	da6e      	bge.n	80047c6 <__kernel_rem_pio2+0x36e>
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	f000 8089 	beq.w	8004800 <__kernel_rem_pio2+0x3a8>
 80046ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80046f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80046f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80046f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f6      	beq.n	80046ee <__kernel_rem_pio2+0x296>
 8004700:	4658      	mov	r0, fp
 8004702:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004760 <__kernel_rem_pio2+0x308>
 8004706:	f000 f9ff 	bl	8004b08 <scalbn>
 800470a:	f108 0301 	add.w	r3, r8, #1
 800470e:	00da      	lsls	r2, r3, #3
 8004710:	9205      	str	r2, [sp, #20]
 8004712:	ec55 4b10 	vmov	r4, r5, d0
 8004716:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004718:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004774 <__kernel_rem_pio2+0x31c>
 800471c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004720:	4646      	mov	r6, r8
 8004722:	f04f 0a00 	mov.w	sl, #0
 8004726:	2e00      	cmp	r6, #0
 8004728:	f280 80cf 	bge.w	80048ca <__kernel_rem_pio2+0x472>
 800472c:	4644      	mov	r4, r8
 800472e:	2c00      	cmp	r4, #0
 8004730:	f2c0 80fd 	blt.w	800492e <__kernel_rem_pio2+0x4d6>
 8004734:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <__kernel_rem_pio2+0x328>)
 8004736:	461f      	mov	r7, r3
 8004738:	ab70      	add	r3, sp, #448	@ 0x1c0
 800473a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800473e:	9306      	str	r3, [sp, #24]
 8004740:	f04f 0a00 	mov.w	sl, #0
 8004744:	f04f 0b00 	mov.w	fp, #0
 8004748:	2600      	movs	r6, #0
 800474a:	eba8 0504 	sub.w	r5, r8, r4
 800474e:	e0e2      	b.n	8004916 <__kernel_rem_pio2+0x4be>
 8004750:	f04f 0902 	mov.w	r9, #2
 8004754:	e754      	b.n	8004600 <__kernel_rem_pio2+0x1a8>
 8004756:	bf00      	nop
	...
 8004764:	3ff00000 	.word	0x3ff00000
 8004768:	08004ef0 	.word	0x08004ef0
 800476c:	40200000 	.word	0x40200000
 8004770:	3ff00000 	.word	0x3ff00000
 8004774:	3e700000 	.word	0x3e700000
 8004778:	41700000 	.word	0x41700000
 800477c:	3fe00000 	.word	0x3fe00000
 8004780:	08004eb0 	.word	0x08004eb0
 8004784:	f854 3b04 	ldr.w	r3, [r4], #4
 8004788:	b945      	cbnz	r5, 800479c <__kernel_rem_pio2+0x344>
 800478a:	b123      	cbz	r3, 8004796 <__kernel_rem_pio2+0x33e>
 800478c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004790:	f844 3c04 	str.w	r3, [r4, #-4]
 8004794:	2301      	movs	r3, #1
 8004796:	3201      	adds	r2, #1
 8004798:	461d      	mov	r5, r3
 800479a:	e738      	b.n	800460e <__kernel_rem_pio2+0x1b6>
 800479c:	1acb      	subs	r3, r1, r3
 800479e:	e7f7      	b.n	8004790 <__kernel_rem_pio2+0x338>
 80047a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80047a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80047ae:	a90c      	add	r1, sp, #48	@ 0x30
 80047b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80047b4:	e739      	b.n	800462a <__kernel_rem_pio2+0x1d2>
 80047b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80047ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80047c4:	e7f3      	b.n	80047ae <__kernel_rem_pio2+0x356>
 80047c6:	a90c      	add	r1, sp, #48	@ 0x30
 80047c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	430a      	orrs	r2, r1
 80047d0:	e787      	b.n	80046e2 <__kernel_rem_pio2+0x28a>
 80047d2:	3401      	adds	r4, #1
 80047d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80047d8:	2a00      	cmp	r2, #0
 80047da:	d0fa      	beq.n	80047d2 <__kernel_rem_pio2+0x37a>
 80047dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80047e2:	eb0d 0503 	add.w	r5, sp, r3
 80047e6:	9b06      	ldr	r3, [sp, #24]
 80047e8:	aa20      	add	r2, sp, #128	@ 0x80
 80047ea:	4443      	add	r3, r8
 80047ec:	f108 0701 	add.w	r7, r8, #1
 80047f0:	3d98      	subs	r5, #152	@ 0x98
 80047f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80047f6:	4444      	add	r4, r8
 80047f8:	42bc      	cmp	r4, r7
 80047fa:	da04      	bge.n	8004806 <__kernel_rem_pio2+0x3ae>
 80047fc:	46a0      	mov	r8, r4
 80047fe:	e6a2      	b.n	8004546 <__kernel_rem_pio2+0xee>
 8004800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004802:	2401      	movs	r4, #1
 8004804:	e7e6      	b.n	80047d4 <__kernel_rem_pio2+0x37c>
 8004806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004808:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800480c:	f7fb fe4e 	bl	80004ac <__aeabi_i2d>
 8004810:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004ad8 <__kernel_rem_pio2+0x680>
 8004814:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800481c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004820:	46b2      	mov	sl, r6
 8004822:	f04f 0800 	mov.w	r8, #0
 8004826:	9b05      	ldr	r3, [sp, #20]
 8004828:	4598      	cmp	r8, r3
 800482a:	dd05      	ble.n	8004838 <__kernel_rem_pio2+0x3e0>
 800482c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004830:	3701      	adds	r7, #1
 8004832:	eca5 7b02 	vstmia	r5!, {d7}
 8004836:	e7df      	b.n	80047f8 <__kernel_rem_pio2+0x3a0>
 8004838:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800483c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004840:	f7fb fe9e 	bl	8000580 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800484c:	f7fb fce2 	bl	8000214 <__adddf3>
 8004850:	f108 0801 	add.w	r8, r8, #1
 8004854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004858:	e7e5      	b.n	8004826 <__kernel_rem_pio2+0x3ce>
 800485a:	f1cb 0000 	rsb	r0, fp, #0
 800485e:	ec47 6b10 	vmov	d0, r6, r7
 8004862:	f000 f951 	bl	8004b08 <scalbn>
 8004866:	ec55 4b10 	vmov	r4, r5, d0
 800486a:	4b9d      	ldr	r3, [pc, #628]	@ (8004ae0 <__kernel_rem_pio2+0x688>)
 800486c:	2200      	movs	r2, #0
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fc f90b 	bl	8000a8c <__aeabi_dcmpge>
 8004876:	b300      	cbz	r0, 80048ba <__kernel_rem_pio2+0x462>
 8004878:	4b9a      	ldr	r3, [pc, #616]	@ (8004ae4 <__kernel_rem_pio2+0x68c>)
 800487a:	2200      	movs	r2, #0
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f7fb fe7e 	bl	8000580 <__aeabi_dmul>
 8004884:	f7fc f916 	bl	8000ab4 <__aeabi_d2iz>
 8004888:	4606      	mov	r6, r0
 800488a:	f7fb fe0f 	bl	80004ac <__aeabi_i2d>
 800488e:	4b94      	ldr	r3, [pc, #592]	@ (8004ae0 <__kernel_rem_pio2+0x688>)
 8004890:	2200      	movs	r2, #0
 8004892:	f7fb fe75 	bl	8000580 <__aeabi_dmul>
 8004896:	460b      	mov	r3, r1
 8004898:	4602      	mov	r2, r0
 800489a:	4629      	mov	r1, r5
 800489c:	4620      	mov	r0, r4
 800489e:	f7fb fcb7 	bl	8000210 <__aeabi_dsub>
 80048a2:	f7fc f907 	bl	8000ab4 <__aeabi_d2iz>
 80048a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80048a8:	f10b 0b18 	add.w	fp, fp, #24
 80048ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80048b0:	f108 0801 	add.w	r8, r8, #1
 80048b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80048b8:	e722      	b.n	8004700 <__kernel_rem_pio2+0x2a8>
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fc f8f9 	bl	8000ab4 <__aeabi_d2iz>
 80048c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80048c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80048c8:	e71a      	b.n	8004700 <__kernel_rem_pio2+0x2a8>
 80048ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80048cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048d0:	f7fb fdec 	bl	80004ac <__aeabi_i2d>
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	f7fb fe52 	bl	8000580 <__aeabi_dmul>
 80048dc:	4652      	mov	r2, sl
 80048de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80048e2:	465b      	mov	r3, fp
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fb fe4a 	bl	8000580 <__aeabi_dmul>
 80048ec:	3e01      	subs	r6, #1
 80048ee:	4604      	mov	r4, r0
 80048f0:	460d      	mov	r5, r1
 80048f2:	e718      	b.n	8004726 <__kernel_rem_pio2+0x2ce>
 80048f4:	9906      	ldr	r1, [sp, #24]
 80048f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80048fa:	9106      	str	r1, [sp, #24]
 80048fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004900:	f7fb fe3e 	bl	8000580 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4650      	mov	r0, sl
 800490a:	4659      	mov	r1, fp
 800490c:	f7fb fc82 	bl	8000214 <__adddf3>
 8004910:	3601      	adds	r6, #1
 8004912:	4682      	mov	sl, r0
 8004914:	468b      	mov	fp, r1
 8004916:	9b00      	ldr	r3, [sp, #0]
 8004918:	429e      	cmp	r6, r3
 800491a:	dc01      	bgt.n	8004920 <__kernel_rem_pio2+0x4c8>
 800491c:	42b5      	cmp	r5, r6
 800491e:	dae9      	bge.n	80048f4 <__kernel_rem_pio2+0x49c>
 8004920:	ab48      	add	r3, sp, #288	@ 0x120
 8004922:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004926:	e9c5 ab00 	strd	sl, fp, [r5]
 800492a:	3c01      	subs	r4, #1
 800492c:	e6ff      	b.n	800472e <__kernel_rem_pio2+0x2d6>
 800492e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004930:	2b02      	cmp	r3, #2
 8004932:	dc0b      	bgt.n	800494c <__kernel_rem_pio2+0x4f4>
 8004934:	2b00      	cmp	r3, #0
 8004936:	dc39      	bgt.n	80049ac <__kernel_rem_pio2+0x554>
 8004938:	d05d      	beq.n	80049f6 <__kernel_rem_pio2+0x59e>
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	f003 0007 	and.w	r0, r3, #7
 8004940:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004944:	ecbd 8b02 	vpop	{d8}
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800494e:	2b03      	cmp	r3, #3
 8004950:	d1f3      	bne.n	800493a <__kernel_rem_pio2+0x4e2>
 8004952:	9b05      	ldr	r3, [sp, #20]
 8004954:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004958:	eb0d 0403 	add.w	r4, sp, r3
 800495c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004960:	4625      	mov	r5, r4
 8004962:	46c2      	mov	sl, r8
 8004964:	f1ba 0f00 	cmp.w	sl, #0
 8004968:	f1a5 0508 	sub.w	r5, r5, #8
 800496c:	dc6b      	bgt.n	8004a46 <__kernel_rem_pio2+0x5ee>
 800496e:	4645      	mov	r5, r8
 8004970:	2d01      	cmp	r5, #1
 8004972:	f1a4 0408 	sub.w	r4, r4, #8
 8004976:	f300 8087 	bgt.w	8004a88 <__kernel_rem_pio2+0x630>
 800497a:	9c05      	ldr	r4, [sp, #20]
 800497c:	ab48      	add	r3, sp, #288	@ 0x120
 800497e:	441c      	add	r4, r3
 8004980:	2000      	movs	r0, #0
 8004982:	2100      	movs	r1, #0
 8004984:	f1b8 0f01 	cmp.w	r8, #1
 8004988:	f300 809c 	bgt.w	8004ac4 <__kernel_rem_pio2+0x66c>
 800498c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004990:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004994:	f1b9 0f00 	cmp.w	r9, #0
 8004998:	f040 80a6 	bne.w	8004ae8 <__kernel_rem_pio2+0x690>
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	e9c3 7800 	strd	r7, r8, [r3]
 80049a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80049a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80049aa:	e7c6      	b.n	800493a <__kernel_rem_pio2+0x4e2>
 80049ac:	9d05      	ldr	r5, [sp, #20]
 80049ae:	ab48      	add	r3, sp, #288	@ 0x120
 80049b0:	441d      	add	r5, r3
 80049b2:	4644      	mov	r4, r8
 80049b4:	2000      	movs	r0, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	2c00      	cmp	r4, #0
 80049ba:	da35      	bge.n	8004a28 <__kernel_rem_pio2+0x5d0>
 80049bc:	f1b9 0f00 	cmp.w	r9, #0
 80049c0:	d038      	beq.n	8004a34 <__kernel_rem_pio2+0x5dc>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80049c8:	9c04      	ldr	r4, [sp, #16]
 80049ca:	e9c4 2300 	strd	r2, r3, [r4]
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80049d6:	f7fb fc1b 	bl	8000210 <__aeabi_dsub>
 80049da:	ad4a      	add	r5, sp, #296	@ 0x128
 80049dc:	2401      	movs	r4, #1
 80049de:	45a0      	cmp	r8, r4
 80049e0:	da2b      	bge.n	8004a3a <__kernel_rem_pio2+0x5e2>
 80049e2:	f1b9 0f00 	cmp.w	r9, #0
 80049e6:	d002      	beq.n	80049ee <__kernel_rem_pio2+0x596>
 80049e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80049ec:	4619      	mov	r1, r3
 80049ee:	9b04      	ldr	r3, [sp, #16]
 80049f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80049f4:	e7a1      	b.n	800493a <__kernel_rem_pio2+0x4e2>
 80049f6:	9c05      	ldr	r4, [sp, #20]
 80049f8:	ab48      	add	r3, sp, #288	@ 0x120
 80049fa:	441c      	add	r4, r3
 80049fc:	2000      	movs	r0, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	f1b8 0f00 	cmp.w	r8, #0
 8004a04:	da09      	bge.n	8004a1a <__kernel_rem_pio2+0x5c2>
 8004a06:	f1b9 0f00 	cmp.w	r9, #0
 8004a0a:	d002      	beq.n	8004a12 <__kernel_rem_pio2+0x5ba>
 8004a0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a10:	4619      	mov	r1, r3
 8004a12:	9b04      	ldr	r3, [sp, #16]
 8004a14:	e9c3 0100 	strd	r0, r1, [r3]
 8004a18:	e78f      	b.n	800493a <__kernel_rem_pio2+0x4e2>
 8004a1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a1e:	f7fb fbf9 	bl	8000214 <__adddf3>
 8004a22:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a26:	e7eb      	b.n	8004a00 <__kernel_rem_pio2+0x5a8>
 8004a28:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004a2c:	f7fb fbf2 	bl	8000214 <__adddf3>
 8004a30:	3c01      	subs	r4, #1
 8004a32:	e7c1      	b.n	80049b8 <__kernel_rem_pio2+0x560>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	e7c6      	b.n	80049c8 <__kernel_rem_pio2+0x570>
 8004a3a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004a3e:	f7fb fbe9 	bl	8000214 <__adddf3>
 8004a42:	3401      	adds	r4, #1
 8004a44:	e7cb      	b.n	80049de <__kernel_rem_pio2+0x586>
 8004a46:	ed95 7b00 	vldr	d7, [r5]
 8004a4a:	ed8d 7b00 	vstr	d7, [sp]
 8004a4e:	ed95 7b02 	vldr	d7, [r5, #8]
 8004a52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a56:	ec53 2b17 	vmov	r2, r3, d7
 8004a5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a5e:	f7fb fbd9 	bl	8000214 <__adddf3>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4606      	mov	r6, r0
 8004a68:	460f      	mov	r7, r1
 8004a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a6e:	f7fb fbcf 	bl	8000210 <__aeabi_dsub>
 8004a72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a76:	f7fb fbcd 	bl	8000214 <__adddf3>
 8004a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a7e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004a82:	e9c5 6700 	strd	r6, r7, [r5]
 8004a86:	e76d      	b.n	8004964 <__kernel_rem_pio2+0x50c>
 8004a88:	ed94 7b00 	vldr	d7, [r4]
 8004a8c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004a90:	ec51 0b17 	vmov	r0, r1, d7
 8004a94:	4652      	mov	r2, sl
 8004a96:	465b      	mov	r3, fp
 8004a98:	ed8d 7b00 	vstr	d7, [sp]
 8004a9c:	f7fb fbba 	bl	8000214 <__adddf3>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004aac:	f7fb fbb0 	bl	8000210 <__aeabi_dsub>
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	465b      	mov	r3, fp
 8004ab4:	f7fb fbae 	bl	8000214 <__adddf3>
 8004ab8:	3d01      	subs	r5, #1
 8004aba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004abe:	e9c4 6700 	strd	r6, r7, [r4]
 8004ac2:	e755      	b.n	8004970 <__kernel_rem_pio2+0x518>
 8004ac4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ac8:	f7fb fba4 	bl	8000214 <__adddf3>
 8004acc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ad0:	e758      	b.n	8004984 <__kernel_rem_pio2+0x52c>
 8004ad2:	bf00      	nop
 8004ad4:	f3af 8000 	nop.w
	...
 8004ae0:	41700000 	.word	0x41700000
 8004ae4:	3e700000 	.word	0x3e700000
 8004ae8:	9b04      	ldr	r3, [sp, #16]
 8004aea:	9a04      	ldr	r2, [sp, #16]
 8004aec:	601f      	str	r7, [r3, #0]
 8004aee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004af2:	605c      	str	r4, [r3, #4]
 8004af4:	609d      	str	r5, [r3, #8]
 8004af6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004afa:	60d3      	str	r3, [r2, #12]
 8004afc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b00:	6110      	str	r0, [r2, #16]
 8004b02:	6153      	str	r3, [r2, #20]
 8004b04:	e719      	b.n	800493a <__kernel_rem_pio2+0x4e2>
 8004b06:	bf00      	nop

08004b08 <scalbn>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	ec55 4b10 	vmov	r4, r5, d0
 8004b0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004b12:	4606      	mov	r6, r0
 8004b14:	462b      	mov	r3, r5
 8004b16:	b991      	cbnz	r1, 8004b3e <scalbn+0x36>
 8004b18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004b1c:	4323      	orrs	r3, r4
 8004b1e:	d03d      	beq.n	8004b9c <scalbn+0x94>
 8004b20:	4b35      	ldr	r3, [pc, #212]	@ (8004bf8 <scalbn+0xf0>)
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	2200      	movs	r2, #0
 8004b28:	f7fb fd2a 	bl	8000580 <__aeabi_dmul>
 8004b2c:	4b33      	ldr	r3, [pc, #204]	@ (8004bfc <scalbn+0xf4>)
 8004b2e:	429e      	cmp	r6, r3
 8004b30:	4604      	mov	r4, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	da0f      	bge.n	8004b56 <scalbn+0x4e>
 8004b36:	a328      	add	r3, pc, #160	@ (adr r3, 8004bd8 <scalbn+0xd0>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	e01e      	b.n	8004b7c <scalbn+0x74>
 8004b3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004b42:	4291      	cmp	r1, r2
 8004b44:	d10b      	bne.n	8004b5e <scalbn+0x56>
 8004b46:	4622      	mov	r2, r4
 8004b48:	4620      	mov	r0, r4
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	f7fb fb62 	bl	8000214 <__adddf3>
 8004b50:	4604      	mov	r4, r0
 8004b52:	460d      	mov	r5, r1
 8004b54:	e022      	b.n	8004b9c <scalbn+0x94>
 8004b56:	460b      	mov	r3, r1
 8004b58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b5c:	3936      	subs	r1, #54	@ 0x36
 8004b5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004b62:	4296      	cmp	r6, r2
 8004b64:	dd0d      	ble.n	8004b82 <scalbn+0x7a>
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	a11d      	add	r1, pc, #116	@ (adr r1, 8004be0 <scalbn+0xd8>)
 8004b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b6e:	da02      	bge.n	8004b76 <scalbn+0x6e>
 8004b70:	a11d      	add	r1, pc, #116	@ (adr r1, 8004be8 <scalbn+0xe0>)
 8004b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b76:	a31a      	add	r3, pc, #104	@ (adr r3, 8004be0 <scalbn+0xd8>)
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	f7fb fd00 	bl	8000580 <__aeabi_dmul>
 8004b80:	e7e6      	b.n	8004b50 <scalbn+0x48>
 8004b82:	1872      	adds	r2, r6, r1
 8004b84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004b88:	428a      	cmp	r2, r1
 8004b8a:	dcec      	bgt.n	8004b66 <scalbn+0x5e>
 8004b8c:	2a00      	cmp	r2, #0
 8004b8e:	dd08      	ble.n	8004ba2 <scalbn+0x9a>
 8004b90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004b94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004b98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b9c:	ec45 4b10 	vmov	d0, r4, r5
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004ba6:	da08      	bge.n	8004bba <scalbn+0xb2>
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	a10b      	add	r1, pc, #44	@ (adr r1, 8004bd8 <scalbn+0xd0>)
 8004bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bb0:	dac1      	bge.n	8004b36 <scalbn+0x2e>
 8004bb2:	a10f      	add	r1, pc, #60	@ (adr r1, 8004bf0 <scalbn+0xe8>)
 8004bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bb8:	e7bd      	b.n	8004b36 <scalbn+0x2e>
 8004bba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004bbe:	3236      	adds	r2, #54	@ 0x36
 8004bc0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004bc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <scalbn+0xf8>)
 8004bcc:	4629      	mov	r1, r5
 8004bce:	2200      	movs	r2, #0
 8004bd0:	e7d4      	b.n	8004b7c <scalbn+0x74>
 8004bd2:	bf00      	nop
 8004bd4:	f3af 8000 	nop.w
 8004bd8:	c2f8f359 	.word	0xc2f8f359
 8004bdc:	01a56e1f 	.word	0x01a56e1f
 8004be0:	8800759c 	.word	0x8800759c
 8004be4:	7e37e43c 	.word	0x7e37e43c
 8004be8:	8800759c 	.word	0x8800759c
 8004bec:	fe37e43c 	.word	0xfe37e43c
 8004bf0:	c2f8f359 	.word	0xc2f8f359
 8004bf4:	81a56e1f 	.word	0x81a56e1f
 8004bf8:	43500000 	.word	0x43500000
 8004bfc:	ffff3cb0 	.word	0xffff3cb0
 8004c00:	3c900000 	.word	0x3c900000
 8004c04:	00000000 	.word	0x00000000

08004c08 <floor>:
 8004c08:	ec51 0b10 	vmov	r0, r1, d0
 8004c0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c14:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004c18:	2e13      	cmp	r6, #19
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	4680      	mov	r8, r0
 8004c20:	dc34      	bgt.n	8004c8c <floor+0x84>
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	da17      	bge.n	8004c56 <floor+0x4e>
 8004c26:	a332      	add	r3, pc, #200	@ (adr r3, 8004cf0 <floor+0xe8>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb faf2 	bl	8000214 <__adddf3>
 8004c30:	2200      	movs	r2, #0
 8004c32:	2300      	movs	r3, #0
 8004c34:	f7fb ff34 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c38:	b150      	cbz	r0, 8004c50 <floor+0x48>
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	da55      	bge.n	8004cea <floor+0xe2>
 8004c3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004c42:	432c      	orrs	r4, r5
 8004c44:	2500      	movs	r5, #0
 8004c46:	42ac      	cmp	r4, r5
 8004c48:	4c2b      	ldr	r4, [pc, #172]	@ (8004cf8 <floor+0xf0>)
 8004c4a:	bf08      	it	eq
 8004c4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004c50:	4621      	mov	r1, r4
 8004c52:	4628      	mov	r0, r5
 8004c54:	e023      	b.n	8004c9e <floor+0x96>
 8004c56:	4f29      	ldr	r7, [pc, #164]	@ (8004cfc <floor+0xf4>)
 8004c58:	4137      	asrs	r7, r6
 8004c5a:	ea01 0307 	and.w	r3, r1, r7
 8004c5e:	4303      	orrs	r3, r0
 8004c60:	d01d      	beq.n	8004c9e <floor+0x96>
 8004c62:	a323      	add	r3, pc, #140	@ (adr r3, 8004cf0 <floor+0xe8>)
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	f7fb fad4 	bl	8000214 <__adddf3>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f7fb ff16 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d0eb      	beq.n	8004c50 <floor+0x48>
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	bfbe      	ittt	lt
 8004c7c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004c80:	4133      	asrlt	r3, r6
 8004c82:	18e4      	addlt	r4, r4, r3
 8004c84:	ea24 0407 	bic.w	r4, r4, r7
 8004c88:	2500      	movs	r5, #0
 8004c8a:	e7e1      	b.n	8004c50 <floor+0x48>
 8004c8c:	2e33      	cmp	r6, #51	@ 0x33
 8004c8e:	dd0a      	ble.n	8004ca6 <floor+0x9e>
 8004c90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004c94:	d103      	bne.n	8004c9e <floor+0x96>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	f7fb fabb 	bl	8000214 <__adddf3>
 8004c9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004caa:	f04f 37ff 	mov.w	r7, #4294967295
 8004cae:	40df      	lsrs	r7, r3
 8004cb0:	4207      	tst	r7, r0
 8004cb2:	d0f4      	beq.n	8004c9e <floor+0x96>
 8004cb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8004cf0 <floor+0xe8>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb faab 	bl	8000214 <__adddf3>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f7fb feed 	bl	8000aa0 <__aeabi_dcmpgt>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d0c2      	beq.n	8004c50 <floor+0x48>
 8004cca:	2c00      	cmp	r4, #0
 8004ccc:	da0a      	bge.n	8004ce4 <floor+0xdc>
 8004cce:	2e14      	cmp	r6, #20
 8004cd0:	d101      	bne.n	8004cd6 <floor+0xce>
 8004cd2:	3401      	adds	r4, #1
 8004cd4:	e006      	b.n	8004ce4 <floor+0xdc>
 8004cd6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004cda:	2301      	movs	r3, #1
 8004cdc:	40b3      	lsls	r3, r6
 8004cde:	441d      	add	r5, r3
 8004ce0:	4545      	cmp	r5, r8
 8004ce2:	d3f6      	bcc.n	8004cd2 <floor+0xca>
 8004ce4:	ea25 0507 	bic.w	r5, r5, r7
 8004ce8:	e7b2      	b.n	8004c50 <floor+0x48>
 8004cea:	2500      	movs	r5, #0
 8004cec:	462c      	mov	r4, r5
 8004cee:	e7af      	b.n	8004c50 <floor+0x48>
 8004cf0:	8800759c 	.word	0x8800759c
 8004cf4:	7e37e43c 	.word	0x7e37e43c
 8004cf8:	bff00000 	.word	0xbff00000
 8004cfc:	000fffff 	.word	0x000fffff

08004d00 <_init>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

08004d0c <_fini>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr
